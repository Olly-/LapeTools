function GetColor(x,y: integer): TColor; begin end;
procedure GetColorsWrap(Coords: TPointArray; var Colors: TIntegerArray); begin end;
function GetColors(const Coords: TPointArray): TIntegerArray; begin end;
function FindColor(var x, y: integer; color, x1, y1, x2, y2: integer): boolean; begin end;
function FindColorTolerance(var x, y: integer; color, x1, y1, x2, y2, tol: integer): boolean; begin end;
function FindColors(var TPA: TPointArray; Color, x1, y1, x2, y2: Integer): Boolean; begin end;
procedure SetColorToleranceSpeed(cts: Integer); begin end;
function GetToleranceSpeed: Integer; begin end;
procedure SetToleranceSpeed2Modifiers(nHue, nSat: Extended); begin end;
procedure GetToleranceSpeed2Modifiers(var hMod, sMod: Extended); begin end;
procedure SetToleranceSpeed3Modifier(Modifier: Extended); begin end;
function GetToleranceSpeed3Modifier: Extended; begin end;
function SimilarColors(Col1,Col2,Tol: integer): boolean; begin end;
function CountColor(Color, xs, ys, xe, ye: Integer): Integer; begin end;
function CountColorTolerance(Color, xs, ys, xe, ye, Tolerance: Integer): Integer; begin end;
function FindColorsTolerance(var Points: TPointArray; Color, xs, ys, xe, ye, Tolerance: Integer): Boolean; begin end;
function FindColorSpiral(var x, y: Integer; color, xs, ys, xe, ye: Integer): Boolean; begin end;
function FindColorSpiralTolerance(var x, y: Integer; color, xs, ys, xe, ye,Tol: Integer): Boolean; begin end;
function FindColorsSpiralTolerance(x, y: Integer; var Points: TPointArray; color, xs, ys, xe, ye: Integer; Tolerance: Integer): boolean; begin end;
function FindColoredArea(var x, y: Integer; color, xs, ys, xe, ye: Integer; MinArea: Integer): Boolean; begin end;
function FindColoredAreaTolerance(var x, y: Integer; Color, xs, ys, xe, ye, MinArea, tol: Integer): Boolean; begin end;
procedure ColorToRGB(Color: integer; var r, g, b: Integer); begin end;
function RGBtoColor(r, g, b: Integer): TColor; begin end;
procedure ColorToHSL(Color: Integer; var h, s, l: Extended); begin end;
function HSLToColor(H, S, L: Extended): TColor; begin end;
procedure ColorToXYZ(Color: Integer; var x, y, z: Extended); begin end;
function XYZToColor(X, Y, Z: Extended): TColor; begin end;
procedure RGBToHSL(R, G, B: Integer; var h, s, l: Extended); begin end;
procedure HSLtoRGB(H, S, L: extended; var R, G,B: Integer); begin end;
procedure RGBToXYZ(R, G, B: Integer; var x, y,z: Extended); begin end;
procedure XYZToRGB(X, Y, Z: Extended; var R, G, B: Integer); begin end;
procedure XYZToHSL(X, Y, Z: Extended; out H, S, L: Extended); begin end;
procedure HSLToXYZ(H, S, L: Extended; out X, Y, Z: Extended); begin end;
procedure XYZtoCIELab(X, Y, Z: Extended; out L, a, b: Extended); begin end;
procedure CIELabtoXYZ(L, a, b: Extended; out X, Y, Z: Extended); begin end;
procedure CIELabToRGB(L, a, b: Extended; out rr, gg, bb: Integer); begin end;
procedure RGBToCIELab(rr, gg, bb: integer; out L, a, b: Extended); begin end;
function CIELabToColor(L, a, b: Extended): TColor; begin end;
procedure ColorToCIELab(Color: integer; out L, a, b: Extended); begin end;
procedure CIELabToHSL(L, a, b: Extended; out HH, SS, LL: Extended); begin end;
procedure HSLToCIELab(HH, SS, LL: Extended; out L, a, b: Extended); begin end;
function ColorToGray(const Color: Integer): TColor; begin end;