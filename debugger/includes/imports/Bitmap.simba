function CreateBitmapString(bmp: integer): string; begin end;
function GetMufasaBitmap(bmp: integer): TMufasaBitmap; begin end;
function CreateBitmap(w,h: integer): integer; begin end;
procedure FreeBitmap(Number: integer); begin end;
procedure SaveBitmap(Bmp: integer; path: string); begin end;
function BitmapExists(Index : integer) : boolean; begin end;
function BitmapFromString(Width,height: integer; Data: string): integer; begin end;
function LoadBitmap(Path: String): integer; begin end;
procedure SetBitmapSize(Bmp,NewW,NewH: integer); begin end;
procedure StretchBitmapResize(Bmp,NewW,NewH: integer); begin end;
procedure ResizeBitmapEx(const bmp: integer; const Method: TBmpResizeMethod; const NewWidth, NewHeight: integer); begin end;
procedure GetBitmapSize(Bmp: integer; var BmpW,BmpH: integer); begin end;
procedure SetPersistentMemoryBitmap(bmp: integer; mem: PtrUInt; awidth, aheight: integer); begin end;
procedure ResetPersistentMemoryBitmap(bmp: integer); begin end;
procedure SetBitmapName(Bmp: integer; name: string); begin end;
function CreateMirroredBitmap(Bmp: integer): integer; begin end;
function CreateMirroredBitmapEx(Bmp: integer; MirrorStyle: TBmpMirrorStyle): integer; begin end;
function FastGetPixel(bmp,x,y: integer): LongWord; begin end;
function FastGetPixels(bmp: integer; TPA: TPointArray): TIntegerArray; begin end;
function GetBitmapAreaColors(bmp,xs, ys, xe, ye: Integer): T2DIntArray; begin end;
function FindColorsBitmap(bmp: integer; var points: TPointArray; const color: integer): boolean; begin end;
procedure FastSetPixel(Bmp,x,y: integer; Color: TColor); begin end;
procedure FastSetPixels(Bmp: integer; TPA: TPointArray; Colors: TIntegerArray); begin end;
procedure DrawTPABitmap(bitmap: integer; TPA: TPointArray; Color: integer); begin end;
procedure DrawATPABitmap(bitmap: integer; ATPA: T2DPointArray); begin end;
procedure DrawATPABitmapEx(bitmap: integer; ATPA: T2DPointArray; Colors: TIntegerArray); begin end;
procedure FastDrawClear(bmp: integer; Color: TColor); begin end;
procedure DrawBitmap(Bmp: Integer; Dest: TCanvas; x, y: Integer); begin end;
procedure FastDrawTransparent(x, y: Integer; SourceBitmap, TargetBitmap: Integer); begin end;
procedure SetTransparentColor(Bmp: integer; Color: TColor); begin end;
function GetTransparentColor(Bmp: integer): TColor; begin end;
procedure FastReplaceColor(bmp: Integer; OldColor, NewColor: TColor); begin end;
procedure CopyClientToBitmap(bmp, xs, ys, xe, ye: Integer); begin end;
function BitmapFromClient(const xs, ys, xe, ye: Integer): Integer; begin end;
function FindBitmap(Bitmap: integer; var x, y: Integer): Boolean; begin end;
function FindBitmapIn(bitmap: integer; var x, y: Integer; xs, ys, xe, ye: Integer): Boolean; begin end;
function FindBitmapToleranceIn(bitmap: integer; var x, y: Integer; xs, ys, xe, ye: Integer; tolerance: Integer): Boolean; begin end;
function FindBitmapSpiral(bitmap: Integer; var x, y: Integer; xs, ys, xe, ye: Integer): Boolean; begin end;
function FindBitmapsSpiralTolerance(bitmap: integer; x, y: Integer; var Points: TPointArray; xs, ys, xe, ye,tolerance: Integer): Boolean; begin end;
function FindBitmapSpiralTolerance(bitmap: integer; var x, y: Integer; xs, ys, xe, ye,tolerance: integer): Boolean; begin end;
function RotateBitmap(bitmap: Integer; angle: Extended): Integer; begin end;
function RotateBitmapEx(Bitmap: Integer; Angle: Single; Expand: Boolean; Smooth: Boolean): Integer; begin end;
function Desaturate(Bitmap: integer): integer; begin end;
procedure InvertBitmap(Bitmap: integer); begin end;
function CopyBitmap(Bitmap: integer): integer; begin end;
function GreyScaleBitmap(Bitmap: integer): integer; begin end;
function BrightnessBitmap(Bitmap, br: integer): integer; begin end;
function ContrastBitmap(bitmap: integer; co: extended): integer; begin end;
function PosterizeBitmap(Bitmap: integer; po: integer): integer; begin end;
function CreateMaskFromBitmap(Bitmap: integer): TMask; begin end;
function FindMaskTolerance(const mask: TMask; var x, y: Integer; xs,ys, xe, ye: Integer; Tolerance, ContourTolerance: Integer): Boolean; begin end;
function FindBitmapMaskTolerance(mask: Integer; var x, y: Integer; xs, ys, xe, ye: Integer; Tolerance, ContourTolerance: Integer): Boolean; begin end;
function FindDeformedBitmapToleranceIn(bitmap: integer; var x, y: Integer; xs, ys, xe, ye: Integer; tolerance: Integer; Range: Integer; AllowPartialAccuracy: Boolean; var accuracy: Extended): Boolean; begin end;
procedure RectangleBitmap(bitmap: integer; const box: TBox; Color: TColor); begin end;
procedure RectangleBitmapEx(const Bitmap: Integer; const Box: TBox; const Color: Integer; const Transparency: Extended); begin end;
procedure FloodFillBitmap(bitmap: integer; const StartPoint: TPoint; const SearchCol,ReplaceCol: TColor); begin end;
function ConvoluteBitmap(bitmap: integer; matrix: T2DExtendedArray): integer; begin end;
procedure ThresholdAdaptiveBitmap(const bmp: integer; Alpha, Beta: Byte; Invert: Boolean; Method: TBmpThreshMethod; C: Integer); begin end;
procedure CropBitmap(const bmp: integer; const xs, ys, xe, ye: integer); begin end;
procedure BlurBitmap(const bmp, block: integer); begin end;
procedure DrawTextBitmap(const Bitmap: Integer; const Text, FontName: string; const pnt: TPoint; const Shadow: Boolean; const Color: Integer); begin end;
procedure DrawSystemTextBitmap(const Bitmap: Integer; const Text, FontName: string; const FontSize: Integer; const pnt: TPoint; const Shadow: Boolean; const Color: Integer); begin end;
function CalculatePixelShift(Bmp1, Bmp2: Integer; CompareBox: TBox): integer; begin end;
function CalculatePixelShiftTPA(Bmp1, Bmp2: Integer; CPoints: TPointArray) : integer; begin end;
function CalculatePixelTolerance(Bmp1, Bmp2: Integer; CompareBox: TBox; CTS: integer): extended; begin end;
function CalculatePixelToleranceTPA(Bmp1, Bmp2: Integer; CPoints: TPointArray; CTS: integer) : extended; begin end;
function GetColorsBitmap(const bmp: integer): TIntegerArray; begin end;
function BitmapToMatrix(const bmp: integer): T2DIntegerArray; begin end;
procedure DrawMatrixBitmap(const bmp: integer; const Matrix: T2DIntegerArray); begin end;