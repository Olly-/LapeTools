type TMDTM = type TObject;
type TMDTMPoint = record x, y, c, t, asz: integer; bp: boolean; end;
type PMDTMPoint = ^TMDTMPoint;
type TMDTMPointArray = array of TMDTMPoint;
function TMDTM.getName(): string; constref; begin end;
procedure TMDTM.setName(const Value: string); constref; begin end;
function TMDTM.getIndex(): integer; constref; begin end;
procedure TMDTM.setIndex(const Value: integer); constref; begin end;
function TMDTM.ToString(): string; constref; begin end;
function TMDTM.SaveToFile(const FileName : string): boolean; constref; begin end;
function TMDTM.LoadFromString(const s : string): boolean; constref; begin end;
procedure TMDTM.Normalize(); constref; begin end;
function TMDTM.Valid(): boolean; constref; begin end;
procedure TMDTM.DeletePoint(Point : integer); constref; begin end;
procedure TMDTM.SwapPoint(p1, p2: integer); constref; begin end;
procedure TMDTM.MovePoint(fromIndex, toIndex: integer); constref; begin end;
function TMDTM.AddPoint(Point: TMDTMPoint): integer; constref; begin end;
function TMDTM.getPPoints(): PMDTMPoint; constref; begin end;
function TMDTM.getCount(): integer; constref; begin end;
procedure TMDTM.setCount(const Value: integer); constref; begin end;
function TMDTM.getPoints(): TMDTMPointArray; constref; begin end;
procedure TMDTM.Init(); begin end;
procedure TMDTM.Free(); constref; begin end;
type TMDTMS = type TObject;
type TSDTMPointDef = record x, y, Color, Tolerance, AreaSize, AreaShape: UInt32; end;
type TSDTMPointDefArray = array of TSDTMPointDef;
type TSDTM = record MainPoint: TSDTMPointDef; SubPoints: TSDTMPointDefArray; end;
function TMDTMS.AddDTM(const d: TSDTM): Integer; constref; begin end;
function TMDTMS.AddDTM(const d: TMDTM): Integer; constref; overload; begin end;
function TMDTMS.ExistsDTM(index : integer): boolean; constref; begin end;
function TMDTMS.GetDTM(index: Integer): TMDTM; constref; begin end;
procedure TMDTMS.FreeDTM(DTM: Integer); constref; begin end;
function TMDTMS.StringToDTM(const S: String): Integer; constref; begin end;
procedure TMDTMS.Init(Owner: TObject); begin end;
procedure TMDTMS.Free(); constref; begin end;
type TMufasaBitmap = type TObject;
type TRGB24 = packed record B, G, R: UInt8; end;
type PRGB24 = ^TRGB24;
type TRGB32 = packed record B, G, R, A: UInt8; end;
type PRGB32 = ^TRGB32;
type TRGB32Array = array of TRGB32;
type PRGB32Array = ^TRGB32Array;
type TPRGB32Array = array of PRGB32;
type PPRGB32Array = ^TPRGB32Array;
type THSL = packed record H, S, L: extended; end;
type PHSL = ^THSL;
type THSLArray = array of THSL;
type PHSLArray = ^THSLArray;
type T2DHSLArray = array of array of THSL;
type P2DHSLArray = ^T2DHSLArray;
function TMufasaBitmap.getData(): PRGB32; constref; begin end;
procedure TMufasaBitmap.setData(const Value: PRGB32); constref; begin end;
function TMufasaBitmap.getName(): string; constref; begin end;
procedure TMufasaBitmap.setName(const Value: string); constref; begin end;
function TMufasaBitmap.getIndex(): integer; constref; begin end;
procedure TMufasaBitmap.setIndex(const Value: integer); constref; begin end;
procedure TMufasaBitmap.SetSize(AWidth,AHeight : integer); constref; begin end;
procedure TMufasaBitmap.StretchResize(AWidth,AHeight : integer); constref; begin end;
function TMufasaBitmap.getWidth(): Integer; constref; begin end;
function TMufasaBitmap.getHeight(): Integer; constref; begin end;
procedure TMufasaBitmap.SetPersistentMemory(mem: PtrUInt; awidth, aheight: integer); constref; begin end;
procedure TMufasaBitmap.ResetPersistentMemory(); constref; begin end;
function TMufasaBitmap.PointInBitmap(x,y : integer): boolean; constref; begin end;
procedure TMufasaBitmap.ValidatePoint(x,y : integer); constref; begin end;
function TMufasaBitmap.SaveToFile(const FileName : string): boolean; constref; begin end;
procedure TMufasaBitmap.LoadFromFile(const FileName : string); constref; begin end;
procedure TMufasaBitmap.Rectangle(const Box : TBox;FillCol : TColor); constref; begin end;
procedure TMufasaBitmap.Rectangle(const Box: TBox; const Color: Integer; const Transparency: Extended); constref; overload; begin end;
procedure TMufasaBitmap.FloodFill(const StartPT : TPoint; const SearchCol, ReplaceCol : TColor); constref; begin end;
procedure TMufasaBitmap.SetPixel(x,y : integer; Color : TColor); constref; begin end;
procedure TMufasaBitmap.SetPixels(Points : TPointArray; Colors : TIntegerArray); constref; begin end;
procedure TMufasaBitmap.DrawATPA(ATPA : T2DPointArray; Colors : TIntegerArray); constref; begin end;
procedure TMufasaBitmap.DrawATPA(ATPA : T2DPointArray); constref; overload; begin end;
procedure TMufasaBitmap.DrawTPA(Points : TPointArray; Color : TColor); constref; begin end;
procedure TMufasaBitmap.DrawToCanvas(x,y : integer; Canvas : TCanvas); constref; begin end;
procedure TMufasaBitmap.LineTo(Src,Dst: TPoint;Color: TColor); constref; begin end;
function TMufasaBitmap.FindColors(var points: TPointArray; const color: integer): Boolean; constref; begin end;
function TMufasaBitmap.GetPixel(x,y : integer): TColor; constref; begin end;
function TMufasaBitmap.GetPixels(Points : TPointArray): TIntegerArray; constref; begin end;
function TMufasaBitmap.GetAreaColors(xs,ys,xe,ye : integer): T2DIntArray; constref; begin end;
function TMufasaBitmap.GetHSLValues(xs, ys, xe, ye: integer): T2DHSLArray; constref; begin end;
procedure TMufasaBitmap.DrawClear(Color : TColor); constref; begin end;
procedure TMufasaBitmap.DrawTransparent(x, y: Integer; TargetBitmap: TMufasaBitmap); constref; begin end;
procedure TMufasaBitmap.ReplaceColor(OldColor, NewColor: TColor); constref; begin end;
procedure TMufasaBitmap.CopyClientToBitmap(MWindow : TObject;Resize : boolean; xs, ys, xe, ye: Integer); constref; begin end;
procedure TMufasaBitmap.CopyClientToBitmap(MWindow : TObject;Resize : boolean;x,y : integer; xs, ys, xe, ye: Integer); constref; overload; begin end;
procedure TMufasaBitmap.RotateBitmap(angle: Extended; TargetBitmap : TMufasaBitmap); constref; begin end;
procedure TMufasaBitmap.RotateBitmapEx(Angle: Single; Expand: Boolean; Smooth: Boolean; TargetBitmap: TMufasaBitmap); constref; begin end;
procedure TMufasaBitmap.Desaturate(TargetBitmap : TMufasaBitmap); constref; begin end;
procedure TMufasaBitmap.Desaturate(); constref; overload; begin end;
procedure TMufasaBitmap.GreyScale(TargetBitmap : TMufasaBitmap); constref; begin end;
procedure TMufasaBitmap.GreyScale(); constref; overload; begin end;
procedure TMufasaBitmap.Brightness(TargetBitmap : TMufasaBitmap; br : integer); constref; begin end;
procedure TMufasaBitmap.Brightness(br: integer); constref; overload; begin end;
procedure TMufasaBitmap.Contrast(TargetBitmap : TMufasaBitmap; co : Extended); constref; begin end;
procedure TMufasaBitmap.Contrast(co: Extended); constref; overload; begin end;
procedure TMufasaBitmap.Invert(TargetBitmap : TMufasaBitmap); constref; begin end;
procedure TMufasaBitmap.Invert(); constref; overload; begin end;
procedure TMufasaBitmap.Posterize(TargetBitmap : TMufasaBitmap; Po : integer); constref; begin end;
procedure TMufasaBitmap.Posterize(Po : integer); constref; overload; begin end;
procedure TMufasaBitmap.Blur(const Block: integer); constref; begin end;
procedure TMufasaBitmap.Blur(const Block, xs, ys, xe, ye: integer); constref; overload; begin end;
procedure TMufasaBitmap.DrawText(const Text, FontName: string; const pnt: TPoint; const Shadow: Boolean; const Color: Integer); constref; begin end;
procedure TMufasaBitmap.DrawSystemText(const Text, FontName: string; const FontSize: Integer; const pnt: TPoint; const Shadow: Boolean; const Color: Integer); constref; begin end;
procedure TMufasaBitmap.Convolute(TargetBitmap : TMufasaBitmap; Matrix : T2DExtendedArray); constref; begin end;
function TMufasaBitmap.Copy(const xs,ys,xe,ye : integer): TMufasaBitmap; constref; begin end;
function TMufasaBitmap.Copy(): TMufasaBitmap; constref; overload; begin end;
procedure TMufasaBitmap.Crop(xs, ys, xe, ye: integer); constref; begin end;
function TMufasaBitmap.GetColors(): TIntegerArray; constref; begin end;
function TMufasaBitmap.ToMatrix(): T2DIntArray; constref; begin end;
procedure TMufasaBitmap.DrawMatrix(const matrix: T2DIntArray); constref; begin end;
procedure TMufasaBitmap.ThresholdAdaptive(Alpha, Beta: Byte; Invert: Boolean; Method: TBmpThreshMethod; C: Integer); constref; begin end;
procedure TMufasaBitmap.ResizeEx(Method: TBmpResizeMethod; NewW, NewH: integer); constref; begin end;
function TMufasaBitmap.ToTBitmap(): TBitmap; constref; begin end;
function TMufasaBitmap.ToString(): string; constref; begin end;
function TMufasaBitmap.RowPtrs(): TPRGB32Array; constref; begin end;
procedure TMufasaBitmap.LoadFromTBitmap(bmp: TBitmap); constref; begin end;
function TMufasaBitmap.CreateTMask(): TMask; constref; begin end;
procedure TMufasaBitmap.SetTransparentColor(Col : TColor); constref; begin end;
function TMufasaBitmap.GetTransparentColor(): TColor; constref; begin end;
function TMufasaBitmap.getTransparentColorSet(): boolean; constref; begin end;
procedure TMufasaBitmap.SetAlphaValue(const value : byte); constref; begin end;
function TMufasaBitmap.getList(): TObject; constref; begin end;
procedure TMufasaBitmap.setList(const Value: TObject); constref; begin end;
procedure TMufasaBitmap.Init(List: TObject = nil); begin end;
procedure TMufasaBitmap.Free(); constref; begin end;
type TMBitmaps = type TObject;
function TMBitmaps.GetBMP(Index : integer): TMufasaBitmap; constref; begin end;
function TMBitmaps.CreateBMP(w, h: integer): Integer; constref; begin end;
function TMBitmaps.ExistsBMP(Index : integer): boolean; constref; begin end;
function TMBitmaps.AddBMP(_bmp: TMufasaBitmap): Integer; constref; begin end;
function TMBitmaps.CopyBMP( Bitmap : integer): Integer; constref; begin end;
function TMBitmaps.CreateMirroredBitmap(bitmap: Integer; MirrorStyle : TBmpMirrorStyle): Integer; constref; begin end;
function TMBitmaps.CreateBMPFromFile(const Path : string): integer; constref; begin end;
function TMBitmaps.CreateBMPFromString(width,height : integer; Data : string): integer; constref; begin end;
function TMBitmaps.CreateBMPFromString(BmpName : string; width,height : integer; Data : string): integer; constref; overload; begin end;
procedure TMBitmaps.RemoveBMP(Number: integer); constref; begin end;
procedure TMBitmaps.Init(Owner : TObject); begin end;
procedure TMBitmaps.Free(); constref; begin end;
type TMFiles = type TObject;
function TMFiles.CreateFile(Path: string): Integer; constref; begin end;
function TMFiles.OpenFile(Path: string; Shared: Boolean): Integer; constref; begin end;
function TMFiles.RewriteFile(Path: string; Shared: Boolean): Integer; constref; begin end;
function TMFiles.AppendFile(Path: string): Integer; constref; begin end;
function TMFiles.DeleteFile(Filename: string): Boolean; constref; begin end;
function TMFiles.RenameFile(OldName, NewName: string): Boolean; constref; begin end;
procedure TMFiles.CloseFile(FileNum: Integer); constref; begin end;
procedure TMFiles.WriteINI(const Section, KeyName, NewString : string; FileName : string); constref; begin end;
function TMFiles.ReadINI(const Section, KeyName : string; FileName : string): string; constref; begin end;
procedure TMFiles.DeleteINI(const Section, KeyName : string; FileName : string); constref; begin end;
function TMFiles.EndOfFile(FileNum: Integer): Boolean; constref; begin end;
function TMFiles.FileSizeMuf(FileNum: Integer): LongInt; constref; begin end;
function TMFiles.ReadFileString(FileNum: Integer; out s: string; x: Integer): Boolean; constref; begin end;
function TMFiles.WriteFileString(FileNum: Integer;const s: string): Boolean; constref; begin end;
function TMFiles.SetFileCharPointer(FileNum, cChars, Origin: Integer): Integer; constref; begin end;
function TMFiles.FilePointerPos(FileNum: Integer): Integer; constref; begin end;
procedure TMFiles.Init(Owner : TObject); begin end;
procedure TMFiles.Free(); constref; begin end;
type TMFinder = type TObject;
type TCTSInfo = Pointer;
type TCTSInfoArray = array of TCTSInfo;
type TCTSInfo2DArray = array of TCTSInfoArray;
function TMFinder.getWarnOnly(): boolean; constref; begin end;
procedure TMFinder.setWarnOnly(const Value: boolean); constref; begin end;
procedure TMFinder.DefaultOperations(var xs,ys,xe,ye : integer); constref; begin end;
function TMFinder.CountColorTolerance(Color, xs, ys, xe, ye, Tolerance: Integer): Integer; constref; begin end;
function TMFinder.CountColor(Color, xs, ys, xe, ye: Integer): Integer; constref; begin end;
function TMFinder.SimilarColors(Color1,Color2,Tolerance : Integer): boolean; constref; begin end;
function TMFinder.FindColor(out x, y: Integer; Color, xs, ys, xe, ye: Integer): Boolean; constref; begin end;
function TMFinder.FindColorSpiral(var x, y: Integer; color, xs, ys, xe, ye: Integer): Boolean; constref; begin end;
function TMFinder.FindColorSpiralTolerance(var x, y: Integer; color, xs, ys, xe, ye,Tol: Integer): Boolean; constref; begin end;
function TMFinder.FindColorTolerance(out x, y: Integer; Color, xs, ys, xe, ye, tol: Integer): Boolean; constref; begin end;
function TMFinder.FindColorsTolerance(out Points: TPointArray; Color, xs, ys, xe, ye, Tol: Integer): Boolean; constref; begin end;
function TMFinder.FindColorsSpiralTolerance(x, y: Integer; out Points: TPointArray; color, xs, ys, xe, ye: Integer; Tol: Integer): boolean; constref; begin end;
function TMFinder.FindColors(var TPA: TPointArray; Color, xs, ys, xe, ye: Integer): Boolean; constref; begin end;
function TMFinder.FindColoredArea(var x, y: Integer; color, xs, ys, xe, ye: Integer; MinArea: Integer): Boolean; constref; begin end;
function TMFinder.FindColoredAreaTolerance(var x, y: Integer; color, xs, ys, xe, ye: Integer; MinArea, tol: Integer): Boolean; constref; begin end;
function TMFinder.FindMaskTolerance(const mask: TMask; out x, y: Integer; xs, ys, xe, ye: Integer; Tolerance, ContourTolerance: Integer): Boolean; constref; begin end;
procedure TMFinder.CheckMask(const Mask : TMask); constref; begin end;
function TMFinder.FindBitmap(bitmap: TMufasaBitmap; out x, y: Integer): Boolean; constref; begin end;
function TMFinder.FindBitmapIn(bitmap: TMufasaBitmap; out x, y: Integer;  xs, ys, xe, ye: Integer): Boolean; constref; begin end;
function TMFinder.FindBitmapToleranceIn(bitmap: TMufasaBitmap; out x, y: Integer; xs, ys, xe, ye: Integer; tolerance: Integer): Boolean; constref; begin end;
function TMFinder.FindBitmapSpiral(bitmap: TMufasaBitmap; var x, y: Integer; xs, ys, xe, ye: Integer): Boolean; constref; begin end;
function TMFinder.FindBitmapSpiralTolerance(bitmap: TMufasaBitmap; var x, y: Integer; xs, ys, xe, ye,tolerance : integer): Boolean; constref; begin end;
function TMFinder.FindBitmapsSpiralTolerance(bitmap: TMufasaBitmap; x, y: Integer; out Points : TPointArray; xs, ys, xe, ye,tolerance: Integer; maxToFind: Integer = 0): Boolean; constref; begin end;
function TMFinder.FindDeformedBitmapToleranceIn(bitmap: TMufasaBitmap; out x, y: Integer; xs, ys, xe, ye: Integer; tolerance: Integer; Range: Integer; AllowPartialAccuracy: Boolean; out accuracy: Extended): Boolean; constref; begin end;
function TMFinder.FindDTM(DTM: TMDTM; out x, y: Integer; x1, y1, x2, y2: Integer): Boolean; constref; begin end;
function TMFinder.FindDTMs(DTM: TMDTM; out Points: TPointArray; x1, y1, x2, y2 : integer; maxToFind: Integer = 0): Boolean; constref; begin end;
function TMFinder.FindDTMRotated(DTM: TMDTM; out x, y: Integer; x1, y1, x2, y2: Integer; sAngle, eAngle, aStep: Extended; out aFound: Extended; Alternating : boolean): Boolean; constref; begin end;
function TMFinder.FindDTMsRotated(DTM: TMDTM; out Points: TPointArray; x1, y1, x2, y2: Integer; sAngle, eAngle, aStep: Extended; out aFound: T2DExtendedArray;Alternating : boolean; maxToFind: Integer = 0): Boolean; constref; begin end;
function TMFinder.GetColors(const Coords: TPointArray): TIntegerArray; constref; begin end;
procedure TMFinder.SetToleranceSpeed(nCTS: Integer); constref; begin end;
function TMFinder.GetToleranceSpeed(): Integer; constref; begin end;
procedure TMFinder.SetToleranceSpeed2Modifiers(const nHue, nSat: Extended); constref; begin end;
procedure TMFinder.GetToleranceSpeed2Modifiers(out hMod, sMod: Extended); constref; begin end;
procedure TMFinder.SetToleranceSpeed3Modifier(modifier: Extended); constref; begin end;
function TMFinder.GetToleranceSpeed3Modifier(): Extended; constref; begin end;
function TMFinder.Create_CTSInfo(Color, Tolerance: Integer): Pointer; constref; begin end;
function TMFinder.Create_CTSInfo(R, G, B, Tolerance: Integer): Pointer; constref; overload; begin end;
function TMFinder.Create_CTSInfoArray(color, tolerance: array of integer): TCTSInfoArray; constref; begin end;
function TMFinder.Create_CTSInfo2DArray(w, h: integer; data: TPRGB32Array; Tolerance: Integer): TCTSInfo2DArray; constref; begin end;
procedure TMFinder.Init(aClient: TObject); begin end;
procedure TMFinder.Free(); constref; begin end;
type TMFont = type TObject;
type TOCRGlyphMetric = record xoff, yoff, width, height, index: Int32; inited: boolean; end;
type TOCRData = record ascii: array[0..255] of TOCRGlyphMetric; pos: T2DIntegerArray; pos_adj: array of Double; neg: T2DIntegerArray; neg_adj: array of Double; map: array of char; width, height, max_width, max_height, inputs, outputs: integer; end;
type TOCRDataArray = array of TOCRData;
function TMFont.getName(): String; constref; begin end;
procedure TMFont.setName(const Value: String); constref; begin end;
function TMFont.getData(): TOcrData; constref; begin end;
procedure TMFont.setData(const Value: TOcrData); constref; begin end;
procedure TMFont.Init(); begin end;
function TMFont.Copy(): TMFont; constref; begin end;
procedure TMFont.Free(); constref; begin end;
type TMFonts = type TObject;
procedure TMFonts.Init(Owner : TObject); begin end;
function TMFonts.GetFont(const Name: String): TOcrData; constref; begin end;
function TMFonts.FreeFont(const Name: String): Boolean; constref; begin end;
function TMFonts.LoadFont(const Name: String; Shadow: Boolean): boolean; constref; begin end;
function TMFonts.LoadSystemFont(const SysFont : TFont; const FontName : string): boolean; constref; begin end;
function TMFonts.Copy(Owner : TObject): TMFonts; constref; begin end;
function TMFonts.Count(): integer; constref; begin end;
function TMFonts.getPath(): string; constref; begin end;
procedure TMFonts.setPath(const Value: string); constref; begin end;
procedure TMFonts.Free(); constref; begin end;
type TMOCR = type TObject;
procedure TMOCR.Init(Owner: TObject); begin end;
function TMOCR.InitTOCR(const path: string): boolean; constref; begin end;
function TMOCR.getTextPointsIn(sx, sy, w, h: Integer; shadow: boolean; var _chars, _shadows: T2DPointArray): Boolean; constref; begin end;
function TMOCR.GetUpTextAtEx(atX, atY: integer; shadow: boolean; fontname: string): string; constref; begin end;
function TMOCR.GetUpTextAt(atX, atY: integer; shadow: boolean): string; constref; begin end;
procedure TMOCR.CreateDefaultFilter(); constref; begin end;
procedure TMOCR.SetFilter(filter: TOCRFilterDataArray); constref; begin end;
procedure TMOCR.ResetFilter(); constref; begin end;
procedure TMOCR.FilterUpTextByColour(bmp: TMufasaBitmap); constref; begin end;
procedure TMOCR.FilterUpTextByCharacteristics(bmp: TMufasaBitmap); constref; begin end;
procedure TMOCR.FilterUpTextByColourMatches(bmp: TMufasaBitmap); constref; begin end;
procedure TMOCR.FilterShadowBitmap(bmp: TMufasaBitmap); constref; begin end;
procedure TMOCR.FilterCharsBitmap(bmp: TMufasaBitmap); constref; begin end;
function TMOCR.GetTextAt(atX, atY, minvspacing, maxvspacing, hspacing, color, tol, len: integer; font: string): string; constref; begin end;
function TMOCR.GetTextAt(xs, ys, xe, ye, minvspacing, maxvspacing, hspacing, color, tol: integer; font: string): string; constref; overload; begin end;
function TMOCR.GetTextATPA(const ATPA: T2DPointArray; const maxvspacing: integer; font: string): string; constref; begin end;
function TMOCR.TextToFontTPA(Text, font: String; out w, h: integer): TPointArray; constref; begin end;
function TMOCR.TextToFontBitmap(Text, font: String): TMufasaBitmap; constref; begin end;
function TMOCR.TextToMask(Text, font: String): TMask; constref; begin end;
function TMOCR.getFonts(): TMFonts; constref; begin end;
procedure TMOCR.setFonts(const Value: TMFonts); constref; begin end;
procedure TMOCR.Free(); constref; begin end;
type TTarget = type TObject;
type TRetData = record Ptr: PRGB32; IncPtrWith: integer; RowLen: integer; end;
procedure TTarget.GetTargetDimensions(out w, h: integer); constref; begin end;
procedure TTarget.GetTargetPosition(out left, top: integer); constref; begin end;
function TTarget.GetColor(x,y : integer): TColor; constref; begin end;
function TTarget.ReturnData(xs, ys, width, height: Integer): TRetData; constref; begin end;
procedure TTarget.FreeReturnData(); constref; begin end;
procedure TTarget.ActivateClient(); constref; begin end;
function TTarget.TargetValid(): boolean; constref; begin end;
function TTarget.MouseSetClientArea(x1, y1, x2, y2: integer): boolean; constref; begin end;
procedure TTarget.MouseResetClientArea(); constref; begin end;
function TTarget.ImageSetClientArea(x1, y1, x2, y2: integer): boolean; constref; begin end;
procedure TTarget.ImageResetClientArea(); constref; begin end;
function TTarget.GetError(): String; constref; begin end;
function TTarget.ReceivedError(): Boolean; constref; begin end;
procedure TTarget.ResetError(); constref; begin end;
procedure TTarget.GetMousePosition(out x,y: integer); constref; begin end;
procedure TTarget.MoveMouse(x,y: integer); constref; begin end;
procedure TTarget.ScrollMouse(x,y : integer; Lines : integer); constref; begin end;
procedure TTarget.HoldMouse(x,y: integer; button: TClickType); constref; begin end;
procedure TTarget.ReleaseMouse(x,y: integer; button: TClickType); constref; begin end;
function TTarget.IsMouseButtonHeld( button : TClickType): boolean; constref; begin end;
procedure TTarget.SendString(str: string; keywait, keymodwait: integer); constref; begin end;
procedure TTarget.HoldKey(key: integer); constref; begin end;
procedure TTarget.ReleaseKey(key: integer); constref; begin end;
function TTarget.IsKeyHeld(key: integer): boolean; constref; begin end;
function TTarget.GetKeyCode(C : char): integer; constref; begin end;
function TTarget.GetHandle(): PtrUInt; constref; begin end;
procedure TTarget.Init(); begin end;
procedure TTarget.Free(); constref; begin end;
type TIOManager_Abstract = type TObject;
function TIOManager_Abstract.GetError(): String; constref; begin end;
function TIOManager_Abstract.ReceivedError(): Boolean; constref; begin end;
procedure TIOManager_Abstract.ResetError(); constref; begin end;
function TIOManager_Abstract.SetTarget(ArrPtr: PRGB32; Size: TPoint): integer; constref; begin end;
function TIOManager_Abstract.SetTarget(bmp : TMufasaBitmap): integer; constref; overload; begin end;
function TIOManager_Abstract.SetTarget(name, initargs: string): integer; constref; overload; begin end;
function TIOManager_Abstract.TargetValid(): Boolean; constref; begin end;
procedure TIOManager_Abstract.BitmapDestroyed(Bitmap : TMufasaBitmap); constref; begin end;
function TIOManager_Abstract.GetColor(x,y : integer): TColor; constref; begin end;
function TIOManager_Abstract.ReturnData(xs, ys, width, height: Integer): TRetData; constref; begin end;
procedure TIOManager_Abstract.FreeReturnData(); constref; begin end;
procedure TIOManager_Abstract.GetDimensions(out W, H: Integer); constref; begin end;
procedure TIOManager_Abstract.GetPosition(var Left, Top: Integer); constref; begin end;
procedure TIOManager_Abstract.ActivateClient(); constref; begin end;
function TIOManager_Abstract.IsFrozen(): boolean; constref; begin end;
procedure TIOManager_Abstract.SetFrozen(makefrozen: boolean); constref; begin end;
function TIOManager_Abstract.MouseSetClientArea(x1, y1, x2, y2: integer): boolean; constref; begin end;
procedure TIOManager_Abstract.MouseResetClientArea(); constref; begin end;
function TIOManager_Abstract.ImageSetClientArea(x1, y1, x2, y2: integer): boolean; constref; begin end;
procedure TIOManager_Abstract.ImageResetClientArea(); constref; begin end;
procedure TIOManager_Abstract.GetMousePos(var X, Y: Integer); constref; begin end;
procedure TIOManager_Abstract.MoveMouse(X, Y: Integer); constref; begin end;
procedure TIOManager_Abstract.ScrollMouse(x,y : integer; Lines : integer); constref; begin end;
procedure TIOManager_Abstract.HoldMouse(x,y : integer; button: TClickType); constref; begin end;
procedure TIOManager_Abstract.ReleaseMouse(x,y : integer; button: TClickType); constref; begin end;
procedure TIOManager_Abstract.ClickMouse(X, Y: Integer; button: TClickType); constref; begin end;
function TIOManager_Abstract.IsMouseButtonDown( button : TClickType): boolean; constref; begin end;
procedure TIOManager_Abstract.KeyUp(key: Word); constref; begin end;
procedure TIOManager_Abstract.KeyDown(key: Word); constref; begin end;
procedure TIOManager_Abstract.PressKey(key: Word); constref; begin end;
procedure TIOManager_Abstract.SendText(text: string; keywait, keymodwait: integer); constref; begin end;
function TIOManager_Abstract.isKeyDown(key: Word): Boolean; constref; begin end;
function TIOManager_Abstract.GetKeyCode(c : char): integer; constref; begin end;
function TIOManager_Abstract.GetImageTarget(): TTarget; constref; begin end;
function TIOManager_Abstract.GetKeyMouseTarget(): TTarget; constref; begin end;
function TIOManager_Abstract.ExportImageTarget(): TTarget_Exported; constref; begin end;
function TIOManager_Abstract.ExportKeyMouseTarget(): TTarget_Exported; constref; begin end;
procedure TIOManager_Abstract.GetImageTarget(var idx: integer); constref; overload; begin end;
procedure TIOManager_Abstract.GetKeyMouseTarget(var idx: integer); constref; overload; begin end;
procedure TIOManager_Abstract.SetImageTarget(idx: integer); constref; begin end;
procedure TIOManager_Abstract.SetKeyMouseTarget(idx: integer); constref; begin end;
procedure TIOManager_Abstract.FreeTarget(idx: integer); constref; begin end;
procedure TIOManager_Abstract.SetState(val: Boolean); constref; begin end;
procedure TIOManager_Abstract.Free(); constref; begin end;
type TIOManager = type TIOManager_Abstract;
procedure TIOManager.Init(); overload; begin end;
procedure TIOManager.Init(plugin_dir: string); overload; begin end;
function TIOManager.SetTarget2(target: TNativeWindow): integer; constref; begin end;
procedure TIOManager.SetDesktop(); constref; begin end;
function TIOManager.GetProcesses(): TSysProcArr; constref; begin end;
procedure TIOManager.SetTargetEx(Proc: TSysProc); constref; begin end;
procedure TIOManager.Free(); constref; begin end;
type TClient = type TObject;
type _TWriteLnProc = procedure(s: string);
function TClient.getIOManager(): TIOManager; constref; begin end;
procedure TClient.setIOManager(const Value: TIOManager); constref; begin end;
function TClient.getMFiles(): TMFiles; constref; begin end;
procedure TClient.setMFiles(const Value: TMFiles); constref; begin end;
function TClient.getMFinder(): TMFinder; constref; begin end;
procedure TClient.setMFinder(const Value: TMFinder); constref; begin end;
function TClient.getMBitmaps(): TMBitmaps; constref; begin end;
procedure TClient.setMBitmaps(const Value: TMBitmaps); constref; begin end;
function TClient.getMDTMs(): TMDTMS; constref; begin end;
procedure TClient.setMDTMs(const Value: TMDTMS); constref; begin end;
function TClient.getMOCR(): TMOCR; constref; begin end;
procedure TClient.setMOCR(const Value: TMOCR); constref; begin end;
function TClient.getWriteLnProc(): TWriteLnProc; constref; begin end;
procedure TClient.setWriteLnProc(const Value: TWriteLnProc); constref; begin end;
procedure TClient.WriteLn(s : string); constref; begin end;
procedure TClient.Init(const plugin_dir: string = ''; const UseIOManager: TIOManager = nil); begin end;
procedure TClient.Free(); constref; begin end;
type TMMLSettingsSandbox = type TObject;
function TMMLSettingsSandbox.IsKey(const KeyName: String): Boolean; constref; begin end;
function TMMLSettingsSandbox.IsDirectory(const KeyName: String): Boolean; constref; begin end;
function TMMLSettingsSandbox.SetKeyValue(const Keyname, Value : string): boolean; constref; begin end;
function TMMLSettingsSandbox.GetKeyValue(const KeyName: String): String; constref; begin end;
function TMMLSettingsSandbox.GetKeyValueDef(const KeyName, defVal: String): String; constref; begin end;
function TMMLSettingsSandbox.ListKeys(const KeyName: String; out Keys : TStringArray): boolean; constref; begin end;
function TMMLSettingsSandbox.DeleteKey(const KeyName: String): Boolean; constref; begin end;
function TMMLSettingsSandbox.DeleteSubKeys(const KeyName: String): Boolean; constref; begin end;
function TMMLSettingsSandbox.getprefix(): string; constref; begin end;
procedure TMMLSettingsSandbox.setprefix(const Value: string); constref; begin end;
type TMMLTimer = type TObject;
type TThreadPriority = (tpIdle, tpLowest, tpLower, tpNormal, tpHigher, tpHighest,tpTimeCritical);
function TMMLTimer.getEnabled(): Boolean; constref; begin end;
procedure TMMLTimer.setEnabled(const Value: Boolean); constref; begin end;
function TMMLTimer.getInterval(): Integer; constref; begin end;
procedure TMMLTimer.setInterval(const Value: Integer); constref; begin end;
function TMMLTimer.getThreadPriority(): TThreadPriority; constref; begin end;
procedure TMMLTimer.setThreadPriority(const Value: TThreadPriority); constref; begin end;
function TMMLTimer.getOnTimer(): TNotifyEvent; constref; begin end;
procedure TMMLTimer.setOnTimer(const Value: TNotifyEvent); constref; begin end;
procedure TMMLTimer.On(); constref; begin end;
procedure TMMLTimer.Off(); constref; begin end;
procedure TMMLTimer.Init(); begin end;
procedure TMMLTimer.Free(); constref; begin end;
type TZAbstractObject = type TObject;
type TJSONObject = type TZAbstractObject;
type TJSONArray = type TZAbstractObject;
procedure TJSONArray.Init(); overload; begin end;
procedure TJSONArray.Init(s : string); overload; begin end;
function TJSONArray.get(index : integer): Pointer; constref; begin end;
function TJSONArray.getBoolean(index : integer): boolean; constref; begin end;
function TJSONArray.getDouble(index : integer): double; constref; begin end;
function TJSONArray.getInt(index : integer): integer; constref; begin end;
function TJSONArray.getJSONArray(index : integer): TJSONArray; constref; begin end;
function TJSONArray.getJSONObject(index : integer): TJsonObject; constref; begin end;
function TJSONArray.getString(index : integer): string; constref; begin end;
function TJSONArray.isNull(index : integer): boolean; constref; begin end;
function TJSONArray.join(separator : string): string; constref; begin end;
function TJSONArray.length(): integer; constref; begin end;
function TJSONArray.opt(index : integer): Pointer; constref; begin end;
function TJSONArray.optBoolean( index : integer): boolean; constref; begin end;
function TJSONArray.optBoolean( index : integer; defaultValue : boolean): boolean; constref; overload; begin end;
function TJSONArray.optDouble(index : integer): double; constref; begin end;
function TJSONArray.optDouble(index : integer; defaultValue :double ): double; constref; overload; begin end;
function TJSONArray.optInt(index : integer): integer; constref; begin end;
function TJSONArray.optInt(index : integer; defaultValue : integer): integer; constref; overload; begin end;
function TJSONArray.optJSONArray(index : integer): TJSONArray; constref; begin end;
function TJSONArray.optJSONObject(index : integer): TJSONObject; constref; begin end;
function TJSONArray.optString(index : integer): string; constref; begin end;
function TJSONArray.optString(index : integer; defaultValue : string): string; constref; overload; begin end;
function TJSONArray.put( value : boolean): TJSONArray; constref; overload; begin end;
function TJSONArray.put( value : double ): TJSONArray; constref; overload; begin end;
function TJSONArray.put( value : integer): TJSONArray; constref; overload; begin end;
function TJSONArray.put( value : pointer): TJSONArray; constref; overload; begin end;
function TJSONArray.put( value: string): TJSONArray; constref; overload; begin end;
function TJSONArray.put( index : integer ; value : boolean): TJSONArray; constref; overload; begin end;
function TJSONArray.put( index : integer ; value : double): TJSONArray; constref; overload; begin end;
function TJSONArray.put( index : integer ; value : integer): TJSONArray; constref; overload; begin end;
function TJSONArray.put( index : integer ; value : pointer): TJSONArray; constref; overload; begin end;
function TJSONArray.put( index: integer; value: string): TJSONArray; constref; overload; begin end;
function TJSONArray.toJSONObject(names  :TJSONArray ): TJsonObject ; constref; overload; begin end;
function TJSONArray.toString(): string; constref; overload; override; begin end;
function TJSONArray.toString(indentFactor : integer): string; constref; overload; begin end;
function TJSONArray.toString(indentFactor, indent : integer): string; constref; overload; begin end;
procedure TJSONArray.Free(); constref; begin end;
procedure TJSONObject.Init(); overload; begin end;
procedure TJSONObject.Init(s : string); overload; begin end;
procedure TJSONObject.clean(); constref; begin end;
function TJSONObject.accumulate(key : string; value : pointer): TJSONObject; constref; begin end;
function TJSONObject.get(key : string): pointer; constref; begin end;
function TJSONObject.getBoolean(key : string): boolean; constref; begin end;
function TJSONObject.getDouble(key : string): double; constref; begin end;
function TJSONObject.getInt(key : string): integer; constref; begin end;
function TJSONObject.getJSONArray(key : string): TJSONArray; constref; begin end;
function TJSONObject.getJSONObject(key : string): TJSONObject; constref; begin end;
function TJSONObject.getString(key : string): string; constref; begin end;
function TJSONObject.has(key : string): boolean; constref; begin end;
function TJSONObject.isNull(key : string): boolean; constref; begin end;
function TJSONObject.keys(): TStringList; constref; begin end;
function TJSONObject.length(): integer; constref; begin end;
function TJSONObject.names(): TJSONArray; constref; begin end;
function TJSONObject.opt(key : string): pointer; constref; begin end;
function TJSONObject.optBoolean(key : string): boolean; constref; begin end;
function TJSONObject.optBoolean(key : string; defaultValue : boolean): boolean; constref; overload; begin end;
function TJSONObject.optDouble(key : string): double; constref; begin end;
function TJSONObject.optDouble(key : string; defaultValue : double): double; constref; overload; begin end;
function TJSONObject.optInt(key : string): integer; constref; begin end;
function TJSONObject.optInt(key : string; defaultValue : integer): integer; constref; overload; begin end;
function TJSONObject.optString(key : string): string; constref; begin end;
function TJSONObject.optString(key : string; defaultValue : string): string; constref; overload; begin end;
function TJSONObject.optJSONArray(key : string): TJSONArray; constref; begin end;
function TJSONObject.optJSONObject(key : string): TJSONObject; constref; begin end;
function TJSONObject.put(key : string; value : boolean): TJSONObject; constref; begin end;
function TJSONObject.put(key : string; value : double): TJSONObject; constref; overload; begin end;
function TJSONObject.put(key : string; value : integer): TJSONObject; constref; overload; begin end;
function TJSONObject.put(key : string; value : string): TJSONObject; constref; overload; begin end;
function TJSONObject.put(key : string; value : pointer): TJSONObject; constref; overload; begin end;
function TJSONObject.putOpt(key : string; value : pointer): TJSONObject; constref; begin end;
function TJSONObject.remove(key : string): pointer; constref; begin end;
procedure TJSONObject.assignTo(json: TJSONObject); constref; begin end;
function TJSONObject.toJSONArray(names : TJSONArray): TJSONArray; constref; begin end;
function TJSONObject.toString(): string ; constref; overload; override; begin end;
function TJSONObject.toString(indentFactor : integer): string; constref; overload; begin end;
function TJSONObject.toString(indentFactor, indent : integer): string; constref; overload; begin end;
procedure TJSONObject.Free(); constref; begin end;