type TObject = type Pointer;
procedure TObject.Init(); begin end;
procedure TObject.Free(); constref; begin end;
function TObject.ToString(): string; constref; begin end;
type _TNotifyEvent = procedure(Sender: TObject);
type PNotifyEvent = ^TNotifyEvent;
type THandle = dword;
type TComponentName = string;
type TSeekOrigin = (soBeginning, soCurrent, soEnd);
type TCaption = string;
type TPersistent = type TObject;
procedure TPersistent.Assign(Source: TPersistent); constref; begin end;
function TPersistent.GetNamePath(): string; constref; begin end;
procedure TPersistent.Init(); begin end;
procedure TPersistent.Free(); constref; begin end;
type TComponent = type TPersistent;
type TComponentState = (csLoading, csReading, csWriting, csDestroying,csDesigning, csAncestor, csUpdating, csFixups, csFreeNotification,csInline, csDesignInstance);
type PComponentState = ^TComponentState;
type PComponentName = ^string;
procedure TComponent.Init(AOwner: TComponent); begin end;
procedure TComponent.DestroyComponents(); constref; begin end;
procedure TComponent.Destroying(); constref; begin end;
function TComponent.FindComponent(const AName: string): TComponent; constref; begin end;
procedure TComponent.InsertComponent(AComponent: TComponent); constref; begin end;
procedure TComponent.RemoveComponent(AComponent: TComponent); constref; begin end;
function TComponent.GetComponent(index: integer): TComponent; constref; begin end;
function TComponent.getComponentCount(): Integer; constref; begin end;
function TComponent.getComponentIndex(): Integer; constref; begin end;
procedure TComponent.setComponentIndex(const Value: Integer); constref; begin end;
function TComponent.getComponentState(): TComponentState; constref; begin end;
function TComponent.getOwner(): TComponent; constref; begin end;
function TComponent.getName(): TComponentName; constref; begin end;
procedure TComponent.setName(const Value: TComponentName); constref; begin end;
function TComponent.getTag(): Integer; constref; begin end;
procedure TComponent.setTag(const Value: Integer); constref; begin end;
procedure TComponent.Free(); constref; begin end;
type TStream = type TObject;
function TStream.Read(var Buffer; Count: Longint): Longint; constref; begin end;
function TStream.Write(constref Buffer; Count: Longint): Longint; constref; begin end;
function TStream.Seek(Offset: Longint; Origin: Word): Longint; constref; begin end;
procedure TStream.ReadBuffer(var Buffer; Count: Longint); constref; begin end;
procedure TStream.WriteBuffer(constref Buffer; Count: Longint); constref; begin end;
function TStream.CopyFrom(Source: TStream; Count: Int64): Int64; constref; begin end;
function TStream.ReadComponent(Instance: TComponent): TComponent; constref; begin end;
function TStream.ReadComponentRes(Instance: TComponent): TComponent; constref; begin end;
procedure TStream.WriteComponent(Instance: TComponent); constref; begin end;
procedure TStream.WriteComponentRes(const ResName: string; Instance: TComponent); constref; begin end;
procedure TStream.WriteDescendent(Instance, Ancestor: TComponent); constref; begin end;
procedure TStream.WriteDescendentRes(const ResName: string; Instance, Ancestor: TComponent); constref; begin end;
procedure TStream.WriteResourceHeader(const ResName: string; var FixupInfo: Integer); constref; begin end;
procedure TStream.FixupResourceHeader(FixupInfo: Integer); constref; begin end;
procedure TStream.ReadResHeader(); constref; begin end;
function TStream.ReadByte(): Byte; constref; begin end;
function TStream.ReadWord(): Word; constref; begin end;
function TStream.ReadDWord(): Cardinal; constref; begin end;
function TStream.ReadAnsiString(): String; constref; begin end;
procedure TStream.WriteByte(b : Byte); constref; begin end;
procedure TStream.WriteWord(w : Word); constref; begin end;
procedure TStream.WriteDWord(d : Cardinal); constref; begin end;
procedure TStream.WriteAnsiString(const S : String); constref; begin end;
function TStream.getPosition(): Integer; constref; begin end;
procedure TStream.setPosition(const Value: Integer); constref; begin end;
function TStream.getSize(): Integer; constref; begin end;
procedure TStream.setSize(const Value: Integer); constref; begin end;
procedure TStream.Init(); begin end;
procedure TStream.Free(); constref; begin end;
type THandleStream = type TStream;
procedure THandleStream.Init(AHandle: THandle); begin end;
function THandleStream.Read(var Buffer; Count: Longint): Longint; constref; begin end;
function THandleStream.Write(constref Buffer; Count: Longint): Longint; constref; begin end;
function THandleStream.Seek(const Offset: Int64; Origin: TSeekOrigin): Int64; constref; begin end;
function THandleStream.getHandle(): THandle; constref; begin end;
procedure THandleStream.Free(); constref; begin end;
type TCustomMemoryStream = type TStream;
function TCustomMemoryStream.Read(var Buffer; Count: LongInt): LongInt; constref; begin end;
function TCustomMemoryStream.Seek(const Offset: Integer; Origin: TSeekOrigin): Int64; constref; begin end;
procedure TCustomMemoryStream.SaveToStream(Stream: TStream); constref; begin end;
procedure TCustomMemoryStream.SaveToFile(const FileName: string); constref; begin end;
function TCustomMemoryStream.getMemory(): Pointer; constref; begin end;
procedure TCustomMemoryStream.Init(); begin end;
procedure TCustomMemoryStream.Free(); constref; begin end;
type TMemoryStream = type TCustomMemoryStream;
procedure TMemoryStream.Clear(); constref; begin end;
procedure TMemoryStream.LoadFromStream(Stream: TStream); constref; begin end;
procedure TMemoryStream.LoadFromFile(const FileName: string); constref; begin end;
procedure TMemoryStream.SetSize(NewSize: PtrInt); constref; begin end;
function TMemoryStream.Write(constref Buffer; Count: LongInt): LongInt; constref; begin end;
procedure TMemoryStream.Init(); begin end;
procedure TMemoryStream.Free(); constref; begin end;
type TFileStream = type THandleStream;
procedure TFileStream.Init(const AFileName: string; Mode: Word); begin end;
function TFileStream.getFileName(): String; constref; begin end;
procedure TFileStream.Free(); constref; begin end;
type TStringStream = type TStream;
procedure TStringStream.Init(const AString: string); begin end;
function TStringStream.Read(var Buffer; Count: Longint): Longint; constref; begin end;
function TStringStream.ReadString(Count: Longint): string; constref; begin end;
function TStringStream.Seek(Offset: Longint; Origin: Word): Longint; constref; begin end;
function TStringStream.Write(constref Buffer; Count: Longint): Longint; constref; begin end;
procedure TStringStream.WriteString(const AString: string); constref; begin end;
function TStringStream.getDataString(): string; constref; begin end;
procedure TStringStream.Free(); constref; begin end;
type TStrings = type TPersistent;
function TStrings.Add(const S: string): Integer; constref; begin end;
function TStrings.AddObject(const S: string; AObject: TObject): Integer; constref; begin end;
procedure TStrings.Append(const S: string); constref; begin end;
procedure TStrings.AddStrings(const TheStrings: TStrings); constref; begin end;
procedure TStrings.Assign(Source: TPersistent); constref; begin end;
procedure TStrings.BeginUpdate(); constref; begin end;
procedure TStrings.Clear(); constref; begin end;
procedure TStrings.Delete(Index: Integer); constref; begin end;
procedure TStrings.EndUpdate(); constref; begin end;
function TStrings.EqualsObj(Obj: TObject): Boolean; constref; begin end;
function TStrings.EqualsStrings(TheStrings: TStrings): Boolean; constref; begin end;
procedure TStrings.Exchange(Index1, Index2: Integer); constref; begin end;
function TStrings.IndexOf(const S: string): Integer; constref; begin end;
function TStrings.IndexOfName(const Name: string): Integer; constref; begin end;
function TStrings.IndexOfObject(AObject: TObject): Integer; constref; begin end;
procedure TStrings.Insert(Index: Integer; const S: string); constref; begin end;
procedure TStrings.InsertObject(Index: Integer; const S: string;AObject:Tobject); constref; begin end;
procedure TStrings.LoadFromFile(const FileName: string); constref; begin end;
procedure TStrings.LoadFromStream(Stream: TStream); constref; begin end;
procedure TStrings.Move(CurIndex, NewIndex: Integer); constref; begin end;
procedure TStrings.SaveToFile(const FileName: string); constref; begin end;
procedure TStrings.SaveToStream(Stream: TStream); constref; begin end;
function TStrings.getCount(): Integer; constref; begin end;
function TStrings.getObjects(const Index: UInt32): TObject; constref; begin end;
procedure TStrings.setObjects(const Index: UInt32; const Value: TObject); constref; begin end;
function TStrings.getValues(const Index: string): string; constref; begin end;
procedure TStrings.setValues(const Index: string; const Value: string); constref; begin end;
function TStrings.getStrings(const Index: UInt32): string; constref; begin end;
procedure TStrings.setStrings(const Index: UInt32; const Value: string); constref; begin end;
function TStrings.getText(): string; constref; begin end;
procedure TStrings.setText(const Value: string); constref; begin end;
procedure TStrings.Init(); begin end;
procedure TStrings.Free(); constref; begin end;
type TStringList = type TStrings;
type TStringListSortCompare = function(List: TStringList; Index1, Index2: Integer): Integer;
function TStringList.Add(const S: string): Integer; constref; begin end;
procedure TStringList.Clear(); constref; begin end;
procedure TStringList.Delete(Index: Integer); constref; begin end;
procedure TStringList.Exchange(Index1, Index2: Integer); constref; begin end;
function TStringList.Find(const S: string; Out Index: Integer): Boolean; constref; begin end;
function TStringList.IndexOf(const S: string): Integer; constref; begin end;
procedure TStringList.Insert(Index: Integer; const S: string); constref; begin end;
procedure TStringList.Sort(); constref; begin end;
procedure TStringList.CustomSort(CompareFn: TStringListSortCompare); constref; begin end;
function TStringList.getSorted(): Boolean; constref; begin end;
procedure TStringList.setSorted(const Value: Boolean); constref; begin end;
function TStringList.getCaseSensitive(): Boolean; constref; begin end;
procedure TStringList.setCaseSensitive(const Value: Boolean); constref; begin end;
function TStringList.getOnChange(): TNotifyEvent; constref; begin end;
procedure TStringList.setOnChange(const Value: TNotifyEvent); constref; begin end;
function TStringList.getOnChanging(): TNotifyEvent; constref; begin end;
procedure TStringList.setOnChanging(const Value: TNotifyEvent); constref; begin end;
function TStringList.getOwnsObjects(): boolean; constref; begin end;
procedure TStringList.setOwnsObjects(const Value: boolean); constref; begin end;
procedure TStringList.Init(); begin end;
procedure TStringList.Free(); constref; begin end;
type TCollection = type TPersistent;
type TCollectionItem = type TPersistent;
procedure TCollectionItem.Init(ACollection: TCollection); begin end;
function TCollectionItem.GetNamePath(): string; constref; begin end;
function TCollectionItem.getCollection(): TCollection; constref; begin end;
procedure TCollectionItem.setCollection(const Value: TCollection); constref; begin end;
function TCollectionItem.getID(): Integer; constref; begin end;
function TCollectionItem.getIndex(): Integer; constref; begin end;
procedure TCollectionItem.setIndex(const Value: Integer); constref; begin end;
function TCollectionItem.getDisplayName(): string; constref; begin end;
procedure TCollectionItem.setDisplayName(const Value: string); constref; begin end;
procedure TCollectionItem.Free(); constref; begin end;
function TCollection.Owner(): TPersistent; constref; begin end;
function TCollection.Add(): TCollectionItem; constref; begin end;
procedure TCollection.Assign(Source: TPersistent); constref; begin end;
procedure TCollection.BeginUpdate(); constref; begin end;
procedure TCollection.Clear(); constref; begin end;
procedure TCollection.EndUpdate(); constref; begin end;
procedure TCollection.Delete(Index: Integer); constref; begin end;
function TCollection.GetNamePath(): string; constref; override; begin end;
function TCollection.Insert(Index: Integer): TCollectionItem; constref; begin end;
function TCollection.FindItemID(ID: Integer): TCollectionItem; constref; begin end;
procedure TCollection.Exchange(Const Index1, index2: integer); constref; begin end;
function TCollection.getCount(): Integer; constref; begin end;
function TCollection.getItems(const Index: UInt32): TCollectionItem; constref; begin end;
procedure TCollection.setItems(const Index: UInt32; const Value: TCollectionItem); constref; begin end;
procedure TCollection.Free(); constref; begin end;
type TRect = record Left,Top,Right,Bottom : Longint;end;
type TFontStyle = (fsBold, fsItalic, fsStrikeOut, fsUnderline);
type TFontQuality = (fqDefault, fqDraft, fqProof, fqNonAntialiased, fqAntialiased, fqCleartype, fqCleartypeNatural);
type TFontStyles = set of TFontStyle;
type TFontPitch = (fpDefault, fpVariable, fpFixed);
type TCopyMode = integer;
type TPenStyle = (psSolid, psDash, psDot, psDashDot, psDashDotDot, psinsideFrame, psPattern,psClear);
type TPenMode = (pmBlack, pmWhite, pmNop, pmNot, pmCopy, pmNotCopy,pmMergePenNot, pmMaskPenNot, pmMergeNotPen, pmMaskNotPen, pmMerge,pmNotMerge, pmMask, pmNotMask, pmXor, pmNotXor);
type TBrushStyle = (bsSolid, bsClear, bsHorizontal, bsVertical, bsFDiagonal,bsBDiagonal, bsCross, bsDiagCross, bsImage, bsPattern);
type TFillStyle = (fsSurface,fsBorder);
type HBITMAP = integer;
type HPALETTE = integer;
type TTransparentMode = (tmAuto, tmFixed);
type TAntialiasingMode = (amDontCare, amOn, amOff);
type TGraphicsObject = type TPersistent;
function TGraphicsObject.getOnChanging(): TNotifyEvent; constref; begin end;
procedure TGraphicsObject.setOnChanging(const Value: TNotifyEvent); constref; begin end;
function TGraphicsObject.getOnChange(): TNotifyEvent; constref; begin end;
procedure TGraphicsObject.setOnChange(const Value: TNotifyEvent); constref; begin end;
procedure TGraphicsObject.Init(); begin end;
procedure TGraphicsObject.Free(); constref; begin end;
type TFont = type TGraphicsObject;
procedure TFont.Init(); begin end;
procedure TFont.Assign(Source: TPersistent); constref; begin end;
procedure TFont.BeginUpdate(); constref; begin end;
procedure TFont.EndUpdate(); constref; begin end;
function TFont.HandleAllocated(): boolean; constref; begin end;
function TFont.getHandle(): THandle; constref; begin end;
procedure TFont.setHandle(const Value: THandle); constref; begin end;
function TFont.IsDefault(): boolean; constref; begin end;
function TFont.IsEqual(AFont: TFont): boolean; constref; begin end;
function TFont.getIsMonoSpace(): boolean; constref; begin end;
procedure TFont.SetDefault(); constref; begin end;
function TFont.getPixelsPerInch(): Integer; constref; begin end;
procedure TFont.setPixelsPerInch(const Value: Integer); constref; begin end;
function TFont.getColor(): TColor; constref; begin end;
procedure TFont.setColor(const Value: TColor); constref; begin end;
function TFont.getHeight(): Integer; constref; begin end;
procedure TFont.setHeight(const Value: Integer); constref; begin end;
function TFont.getName(): string; constref; begin end;
procedure TFont.setName(const Value: string); constref; begin end;
function TFont.getOrientation(): Integer; constref; begin end;
procedure TFont.setOrientation(const Value: Integer); constref; begin end;
function TFont.getPitch(): TFontPitch; constref; begin end;
procedure TFont.setPitch(const Value: TFontPitch); constref; begin end;
function TFont.getSize(): Integer; constref; begin end;
procedure TFont.setSize(const Value: Integer); constref; begin end;
function TFont.getStyle(): TFontStyles; constref; begin end;
procedure TFont.setStyle(const Value: TFontStyles); constref; begin end;
function TFont.getQuality(): TFontQuality; constref; begin end;
procedure TFont.setQuality(const Value: TFontQuality); constref; begin end;
procedure TFont.Free(); constref; begin end;
type TPen = type TGraphicsObject;
procedure TPen.Init(); begin end;
procedure TPen.Assign(Source: TPersistent); constref; begin end;
function TPen.getHandle(): THandle; constref; begin end;
procedure TPen.setHandle(const Value: THandle); constref; begin end;
function TPen.getColor(): Integer; constref; begin end;
procedure TPen.setColor(const Value: Integer); constref; begin end;
function TPen.getCosmetic(): Boolean; constref; begin end;
procedure TPen.setCosmetic(const Value: Boolean); constref; begin end;
function TPen.getMode(): TPenMode; constref; begin end;
procedure TPen.setMode(const Value: TPenMode); constref; begin end;
function TPen.getStyle(): TPenStyle; constref; begin end;
procedure TPen.setStyle(const Value: TPenStyle); constref; begin end;
function TPen.getWidth(): integer; constref; begin end;
procedure TPen.setWidth(const Value: integer); constref; begin end;
procedure TPen.Free(); constref; begin end;
type TBrush = type TGraphicsObject;
procedure TBrush.Assign(Source: TPersistent); constref; begin end;
procedure TBrush.Init(); begin end;
function TBrush.getColor(): Integer; constref; begin end;
procedure TBrush.setColor(const Value: Integer); constref; begin end;
function TBrush.getStyle(): TBrushStyle; constref; begin end;
procedure TBrush.setStyle(const Value: TBrushStyle); constref; begin end;
procedure TBrush.Free(); constref; begin end;
type TGraphic = type TPersistent;
procedure TGraphic.Assign(ASource: TPersistent); constref; begin end;
procedure TGraphic.Init(); begin end;
procedure TGraphic.Clear(); constref; begin end;
procedure TGraphic.LoadFromFile(const Filename: string); constref; begin end;
procedure TGraphic.SaveToFile(const Filename: string); constref; begin end;
procedure TGraphic.LoadFromClipboardFormat(); constref; begin end;
function TGraphic.getEmpty(): Boolean; constref; begin end;
function TGraphic.getHeight(): Integer; constref; begin end;
procedure TGraphic.setHeight(const Value: Integer); constref; begin end;
function TGraphic.getModified(): Boolean; constref; begin end;
procedure TGraphic.setModified(const Value: Boolean); constref; begin end;
function TGraphic.getOnChange(): TNotifyEvent; constref; begin end;
procedure TGraphic.setOnChange(const Value: TNotifyEvent); constref; begin end;
function TGraphic.getPalette(): Integer; constref; begin end;
procedure TGraphic.setPalette(const Value: Integer); constref; begin end;
function TGraphic.getPaletteModified(): Boolean; constref; begin end;
procedure TGraphic.setPaletteModified(const Value: Boolean); constref; begin end;
function TGraphic.getTransparent(): Boolean; constref; begin end;
procedure TGraphic.setTransparent(const Value: Boolean); constref; begin end;
function TGraphic.getWidth(): Integer; constref; begin end;
procedure TGraphic.setWidth(const Value: Integer); constref; begin end;
procedure TGraphic.Free(); constref; begin end;
type TCanvas = type TPersistent;
procedure TCanvas.Lock(); constref; begin end;
function TCanvas.TryLock(): Boolean; constref; begin end;
procedure TCanvas.Unlock(); constref; begin end;
procedure TCanvas.Refresh(); constref; begin end;
procedure TCanvas.Changing(); constref; begin end;
procedure TCanvas.Changed(); constref; begin end;
procedure TCanvas.SaveHandleState(); constref; begin end;
procedure TCanvas.RestoreHandleState(); constref; begin end;
procedure TCanvas.Arc(ALeft, ATop, ARight, ABottom, SX, SY, EX, EY: Integer); constref; begin end;
procedure TCanvas.Chord(x1, y1, x2, y2, SX, SY, EX, EY: Integer); constref; begin end;
procedure TCanvas.CopyRect(Dest: TRect; SrcCanvas: TCanvas;Source: TRect); constref; begin end;
procedure TCanvas.Draw(X,Y: Integer; SrcGraphic: TGraphic); constref; begin end;
procedure TCanvas.DrawFocusRect(ARect: TRect); constref; begin end;
procedure TCanvas.Ellipse(x1, y1, x2, y2: Integer); constref; begin end;
procedure TCanvas.FillRect(X1,Y1,X2,Y2: Integer); constref; begin end;
procedure TCanvas.FloodFill(X, Y: Integer; FillColor: TColor;FillStyle: TFillStyle); constref; begin end;
procedure TCanvas.RadialPie(x1, y1, x2, y2, StartAngle16Deg, Angle16DegLength: Integer); constref; begin end;
procedure TCanvas.Pie(EllipseX1,EllipseY1,EllipseX2,EllipseY2, StartX,StartY,EndX,EndY: Integer); constref; begin end;
procedure TCanvas.PolyBezier(Points: PPoint; NumPts: Integer; Filled: boolean;Continuous: boolean); constref; begin end;
procedure TCanvas.PolyBezier( Points: TPointArray;Filled: boolean; Continuous: boolean); constref; overload; begin end;
procedure TCanvas.Polygon( Points: TPointArray;Winding: Boolean;StartIndex: Integer; NumPts: Integer); constref; begin end;
procedure TCanvas.Polygon(Points: PPoint; NumPts: Integer;Winding: boolean); constref; overload; begin end;
procedure TCanvas.Polygon( Points: TPointArray); constref; overload; begin end;
procedure TCanvas.Polyline( Points: TPointArray;StartIndex: Integer;NumPts: Integer); constref; begin end;
procedure TCanvas.Polyline(Points: PPoint; NumPts: Integer); constref; overload; begin end;
procedure TCanvas.Polyline( Points: TPointArray); constref; overload; begin end;
procedure TCanvas.Rectangle(X1,Y1,X2,Y2: Integer); constref; begin end;
procedure TCanvas.Rectangle( ARect: TRect); constref; overload; begin end;
procedure TCanvas.RoundRect(X1, Y1, X2, Y2: Integer; RX,RY: Integer); constref; begin end;
procedure TCanvas.RoundRect( Rect: TRect; RX,RY: Integer); constref; overload; begin end;
procedure TCanvas.TextOut(X,Y: Integer;  Text: String); constref; begin end;
procedure TCanvas.TextRect( ARect: TRect; X, Y: integer;  Text: string); constref; begin end;
function TCanvas.TextHeight( Text: string): Integer; constref; begin end;
function TCanvas.TextWidth( Text: string): Integer; constref; begin end;
function TCanvas.HandleAllocated(): Boolean; constref; begin end;
function TCanvas.GetPixel(x, y: integer): TColor; constref; begin end;
procedure TCanvas.SetPixel(x, y: integer; Colour: TColor); constref; begin end;
procedure TCanvas.SetPixels(TPA: TPointArray; Colour: TColor); constref; begin end;
procedure TCanvas.SetPixels(TPA: TPointArray; Cols: TIntegerArray); constref; overload; begin end;
function TCanvas.GetPixels(const TPA: TPointArray): TIntegerArray; constref; begin end;
procedure TCanvas.Clear(); constref; begin end;
procedure TCanvas.MoveTo(x, y: Integer); constref; begin end;
procedure TCanvas.LineTo(x, y: Integer); constref; begin end;
procedure TCanvas.Frame3D(var ARect: TRect; TopColor, BottomColor: TColor; const FrameWidth: integer); constref; begin end;
procedure TCanvas.Frame(X1, Y1, X2, Y2: Integer); constref; begin end;
function TCanvas.getAutoRedraw(): Boolean; constref; begin end;
procedure TCanvas.setAutoRedraw(const Value: Boolean); constref; begin end;
function TCanvas.getBrush(): TBrush; constref; begin end;
procedure TCanvas.setBrush(const Value: TBrush); constref; begin end;
function TCanvas.getCopyMode(): TCopyMode; constref; begin end;
procedure TCanvas.setCopyMode(const Value: TCopyMode); constref; begin end;
function TCanvas.getFont(): TFont; constref; begin end;
procedure TCanvas.setFont(const Value: TFont); constref; begin end;
function TCanvas.getHeight(): integer; constref; begin end;
function TCanvas.getPen(): TPen; constref; begin end;
procedure TCanvas.setPen(const Value: TPen); constref; begin end;
function TCanvas.getWidth(): integer; constref; begin end;
function TCanvas.getOnChange(): TNotifyEvent; constref; begin end;
procedure TCanvas.setOnChange(const Value: TNotifyEvent); constref; begin end;
function TCanvas.getOnChanging(): TNotifyEvent; constref; begin end;
procedure TCanvas.setOnChanging(const Value: TNotifyEvent); constref; begin end;
function TCanvas.getAntialiasingMode(): TAntialiasingMode; constref; begin end;
procedure TCanvas.setAntialiasingMode(const Value: TAntialiasingMode); constref; begin end;
procedure TCanvas.Init(); begin end;
procedure TCanvas.Free(); constref; begin end;
type TBitmap = type TGraphic;
procedure TBitmap.Init(); begin end;
procedure TBitmap.BeginUpdate(ACanvasOnly: Boolean); constref; begin end;
procedure TBitmap.EndUpdate(AStreamIsValid: Boolean); constref; begin end;
procedure TBitmap.FreeImage(); constref; begin end;
function TBitmap.BitmapHandleAllocated(): boolean; constref; begin end;
function TBitmap.MaskHandleAllocated(): boolean; constref; begin end;
function TBitmap.PaletteAllocated(): boolean; constref; begin end;
procedure TBitmap.LoadFromStream(AStream: TStream); constref; begin end;
procedure TBitmap.LoadFromStream(AStream: TStream; ASize: Cardinal);constref; overload; begin end;
procedure TBitmap.SaveToStream(AStream: TStream); constref; begin end;
procedure TBitmap.GetSize(var AWidth, AHeight: Integer); constref; begin end;
procedure TBitmap.Mask(ATransparentColor: TColor); constref; begin end;
function TBitmap.ReleaseBitmapHandle(): HBITMAP; constref; begin end;
function TBitmap.ReleaseMaskHandle(): HBITMAP; constref; begin end;
function TBitmap.ReleasePalette(): HPALETTE; constref; begin end;
function TBitmap.ToString(): string; constref; begin end;
procedure TBitmap.LoadFromString(w, h, TransparentColor: integer; data: string); constref; begin end;
function TBitmap.getCanvas(): TCanvas; constref; begin end;
function TBitmap.HandleAllocated(): boolean; constref; begin end;
function TBitmap.getBitmapHandle(): HBITMAP; constref; begin end;
procedure TBitmap.setBitmapHandle(const Value: HBITMAP); constref; begin end;
function TBitmap.getMasked(): Boolean; constref; begin end;
procedure TBitmap.setMasked(const Value: Boolean); constref; begin end;
function TBitmap.getMaskHandle(): HBITMAP; constref; begin end;
procedure TBitmap.setMaskHandle(const Value: HBITMAP); constref; begin end;
function TBitmap.getTransparentColor(): TColor; constref; begin end;
procedure TBitmap.setTransparentColor(const Value: TColor); constref; begin end;
function TBitmap.getTransparentMode(): TTransparentMode; constref; begin end;
procedure TBitmap.setTransparentMode(const Value: TTransparentMode); constref; begin end;
function TBitmap.getTransparent(): Boolean; constref; begin end;
procedure TBitmap.setTransparent(const Value: Boolean); constref; begin end;
procedure TBitmap.Free(); constref; begin end;
type TPicture = type TPersistent;
procedure TPicture.Init(); begin end;
procedure TPicture.Clear(); constref; begin end;
procedure TPicture.LoadFromFile(const Filename: string); constref; begin end;
procedure TPicture.LoadFromStream(Stream: TStream); constref; begin end;
procedure TPicture.LoadFromStreamWithFileExt(Stream: TStream; const FileExt: string); constref; begin end;
procedure TPicture.SaveToFile(const Filename: string; const FileExt: string); constref; begin end;
procedure TPicture.SaveToStream(Stream: TStream); constref; begin end;
procedure TPicture.SaveToStreamWithFileExt(Stream: TStream; const FileExt: string); constref; begin end;
function TPicture.getBitmap(): TBitmap; constref; begin end;
procedure TPicture.setBitmap(const Value: TBitmap); constref; begin end;
function TPicture.getGraphic(): TGraphic; constref; begin end;
procedure TPicture.setGraphic(const Value: TGraphic); constref; begin end;
function TPicture.getHeight(): Integer; constref; begin end;
function TPicture.getWidth(): Integer; constref; begin end;
function TPicture.getOnChange(): TNotifyEvent; constref; begin end;
procedure TPicture.setOnChange(const Value: TNotifyEvent); constref; begin end;
procedure TPicture.Free(); constref; begin end;
type TShiftStateEnum = (ssShift, ssAlt, ssCtrl, ssLeft, ssRight, ssMiddle, ssDouble, ssMeta, ssSuper, ssHyper, ssAltGr, ssCaps, ssNum, ssScroll, ssTriple, ssQuad, ssExtra1, ssExtra2);
type TShiftState = set of TShiftStateEnum;
type _TKeyEvent = procedure(Sender: TObject; var Key: Word; Shift: TShiftState);
type _TKeyPressEvent = procedure(Sender: TObject; var Key: char);
type TMouseButton = (mbLeft, mbRight, mbMiddle, mbExtra1, mbExtra2);
type _TMouseEvent = procedure(Sender: TObject; Button: TMouseButton;Shift: TShiftState; X, Y: Integer);
type _TMouseMoveEvent = procedure(Sender: TObject; Shift: TShiftState; X, Y: Integer);
type TScrollBarKind = (sbHorizontal, sbVertical);
type TAlign = (alNone, alTop, alBottom, alLeft, alRight, alClient, alCustom);
type TFormBorderStyle = (bsNone, bsSingle, bsSizeable, bsDialog, bsToolWindow, bsSizeToolWin);
type TCursor = Integer;
type TControl = type TComponent;
procedure TControl.AdjustSize(); constref; begin end;
function TControl.AutoSizeDelayed(): boolean; constref; begin end;
function TControl.AutoSizeDelayedReport(): string; constref; begin end;
function TControl.AutoSizeDelayedHandle(): Boolean; constref; begin end;
procedure TControl.SetBounds(aLeft, aTop, aWidth, aHeight: integer); constref; begin end;
procedure TControl.SetInitialBounds(aLeft, aTop, aWidth, aHeight: integer); constref; begin end;
procedure TControl.SetBoundsKeepBase(aLeft, aTop, aWidth, aHeight: integer); constref; begin end;
procedure TControl.GetPreferredSize(var PreferredWidth, PreferredHeight: integer;Raw: boolean;WithThemeSpace: boolean); constref; begin end;
function TControl.GetDefaultWidth(): integer; constref; begin end;
function TControl.GetDefaultHeight(): integer; constref; begin end;
function TControl.GetColorResolvingParent(): Integer; constref; begin end;
function TControl.GetRGBColorResolvingParent(): Integer; constref; begin end;
procedure TControl.InvalidatePreferredSize(); constref; begin end;
procedure TControl.UpdateBaseBounds(StoreBounds, StoreParentClientSize,UseLoadedValues: boolean); constref; begin end;
function TControl.getBaseBounds(): TRect; constref; begin end;
function TControl.getReadBounds(): TRect; constref; begin end;
procedure TControl.WriteLayoutDebugReport(const Prefix: string); constref; begin end;
function TControl.ShouldAutoAdjustLeftAndTop(): Boolean; constref; begin end;
function TControl.ShouldAutoAdjustWidthAndHeight(): Boolean; constref; begin end;
procedure TControl.Init(TheOwner: TComponent); begin end;
procedure TControl.BeforeDestruction(); constref; begin end;
procedure TControl.EditingDone(); constref; begin end;
procedure TControl.ExecuteDefaultAction(); constref; begin end;
procedure TControl.ExecuteCancelAction(); constref; begin end;
procedure TControl.BringToFront(); constref; begin end;
function TControl.HasParent(): Boolean; constref; begin end;
function TControl.GetParentComponent(): TComponent; constref; begin end;
function TControl.IsParentOf(AControl: TControl): boolean; constref; begin end;
function TControl.GetTopParent(): TControl; constref; begin end;
function TControl.IsVisible(): Boolean; constref; begin end;
function TControl.IsControlVisible(): Boolean; constref; begin end;
function TControl.IsEnabled(): Boolean; constref; begin end;
function TControl.IsParentColor(): Boolean; constref; begin end;
function TControl.IsParentFont(): Boolean; constref; begin end;
function TControl.FormIsUpdating(): boolean; constref; begin end;
function TControl.IsProcessingPaintMsg(): boolean; constref; begin end;
procedure TControl.Hide(); constref; begin end;
procedure TControl.Refresh(); constref; begin end;
procedure TControl.Repaint(); constref; begin end;
procedure TControl.Invalidate(); constref; begin end;
procedure TControl.SendToBack(); constref; begin end;
procedure TControl.UpdateRolesForForm(); constref; begin end;
procedure TControl.ActiveDefaultControlChanged(NewControl: TControl); constref; begin end;
function TControl.GetTextBuf(Buffer: PChar; BufSize: Integer): Integer; constref; begin end;
function TControl.GetTextLen(): Integer; constref; begin end;
procedure TControl.SetTextBuf(Buffer: PChar); constref; begin end;
function TControl.ScreenToClient(const APoint: TPoint): TPoint; constref; begin end;
function TControl.ClientToScreen(const APoint: TPoint): TPoint; constref; begin end;
function TControl.ScreenToControl(const APoint: TPoint): TPoint; constref; begin end;
function TControl.ControlToScreen(const APoint: TPoint): TPoint; constref; begin end;
function TControl.GetChildsRect(Scrolled: boolean): TRect; constref; begin end;
procedure TControl.Show(); constref; begin end;
procedure TControl.Update(); constref; begin end;
function TControl.HandleObjectShouldBeVisible(): boolean; constref; begin end;
function TControl.ParentDestroyingHandle(): boolean; constref; begin end;
function TControl.ParentHandlesAllocated(): boolean; constref; begin end;
procedure TControl.InitiateAction(); constref; begin end;
function TControl.getCursor(): TCursor; constref; begin end;
procedure TControl.setCursor(const Value: TCursor); constref; begin end;
function TControl.getAlign(): TAlign; constref; begin end;
procedure TControl.setAlign(const Value: TAlign); constref; begin end;
function TControl.getAutoSize(): Boolean; constref; begin end;
procedure TControl.setAutoSize(const Value: Boolean); constref; begin end;
function TControl.getBoundsRect(): TRect; constref; begin end;
procedure TControl.setBoundsRect(const Value: TRect); constref; begin end;
function TControl.getBoundsRectForNewParent(): TRect; constref; begin end;
procedure TControl.setBoundsRectForNewParent(const Value: TRect); constref; begin end;
function TControl.getCaption(): String; constref; begin end;
procedure TControl.setCaption(const Value: String); constref; begin end;
function TControl.getClientHeight(): Integer; constref; begin end;
procedure TControl.setClientHeight(const Value: Integer); constref; begin end;
function TControl.getClientOrigin(): TPoint; constref; begin end;
function TControl.getClientRect(): TRect; constref; begin end;
function TControl.getClientWidth(): Integer; constref; begin end;
procedure TControl.setClientWidth(const Value: Integer); constref; begin end;
function TControl.getColor(): Integer; constref; begin end;
procedure TControl.setColor(const Value: Integer); constref; begin end;
function TControl.getControlOrigin(): TPoint; constref; begin end;
function TControl.getEnabled(): Boolean; constref; begin end;
procedure TControl.setEnabled(const Value: Boolean); constref; begin end;
function TControl.getFont(): TFont; constref; begin end;
procedure TControl.setFont(const Value: TFont); constref; begin end;
function TControl.getIsControl(): Boolean; constref; begin end;
procedure TControl.setIsControl(const Value: Boolean); constref; begin end;
function TControl.getMouseEntered(): Boolean; constref; begin end;
function TControl.getOnChangeBounds(): TNotifyEvent; constref; begin end;
procedure TControl.setOnChangeBounds(const Value: TNotifyEvent); constref; begin end;
function TControl.getOnClick(): TNotifyEvent; constref; begin end;
procedure TControl.setOnClick(const Value: TNotifyEvent); constref; begin end;
function TControl.getOnResize(): TNotifyEvent; constref; begin end;
procedure TControl.setOnResize(const Value: TNotifyEvent); constref; begin end;
function TControl.getVisible(): Boolean; constref; begin end;
procedure TControl.setVisible(const Value: Boolean); constref; begin end;
function TControl.getShowHint(): Boolean; constref; begin end;
procedure TControl.setShowHint(const Value: Boolean); constref; begin end;
function TControl.UseRightToLeftAlignment(): Boolean; constref; begin end;
function TControl.UseRightToLeftReading(): Boolean; constref; begin end;
function TControl.UseRightToLeftScrollBar(): Boolean; constref; begin end;
function TControl.IsRightToLeft(): Boolean; constref; begin end;
function TControl.getLeft(): Integer; constref; begin end;
procedure TControl.setLeft(const Value: Integer); constref; begin end;
function TControl.getHeight(): Integer; constref; begin end;
procedure TControl.setHeight(const Value: Integer); constref; begin end;
function TControl.getTop(): Integer; constref; begin end;
procedure TControl.setTop(const Value: Integer); constref; begin end;
function TControl.getWidth(): Integer; constref; begin end;
procedure TControl.setWidth(const Value: Integer); constref; begin end;
procedure TControl.ShowHint(); constref; begin end;
function TControl.getHint(): String; constref; begin end;
procedure TControl.setHint(const Value: String); constref; begin end;
function TControl.getParent(): TControl; constref; begin end;
procedure TControl.setParent(const Value: TControl); constref; begin end;
procedure TControl.Free(); constref; begin end;
type TWinControl = type TControl;
function TWinControl.getBorderWidth(): integer; constref; begin end;
procedure TWinControl.setBorderWidth(const Value: integer); constref; begin end;
function TWinControl.getBoundsLockCount(): integer; constref; begin end;
function TWinControl.getBrush(): TBrush; constref; begin end;
function TWinControl.getCachedClientHeight(): integer; constref; begin end;
function TWinControl.getCachedClientWidth(): integer; constref; begin end;
function TWinControl.getControlCount(): Integer; constref; begin end;
function TWinControl.getDoubleBuffered(): Boolean; constref; begin end;
procedure TWinControl.setDoubleBuffered(const Value: Boolean); constref; begin end;
function TWinControl.getHandle(): THandle; constref; begin end;
procedure TWinControl.setHandle(const Value: THandle); constref; begin end;
function TWinControl.getIsResizing(): Boolean; constref; begin end;
function TWinControl.getTabOrder(): Integer; constref; begin end;
procedure TWinControl.setTabOrder(const Value: Integer); constref; begin end;
function TWinControl.getTabStop(): Boolean; constref; begin end;
procedure TWinControl.setTabStop(const Value: Boolean); constref; begin end;
function TWinControl.getOnEnter(): TNotifyEvent; constref; begin end;
procedure TWinControl.setOnEnter(const Value: TNotifyEvent); constref; begin end;
function TWinControl.getOnExit(): TNotifyEvent; constref; begin end;
procedure TWinControl.setOnExit(const Value: TNotifyEvent); constref; begin end;
procedure TWinControl.setOnKeyDown(const Value: TKeyEvent); constref; begin end;
procedure TWinControl.setOnKeyPress(const Value: TKeyPressEvent); constref; begin end;
procedure TWinControl.setOnKeyUp(const Value: TKeyEvent); constref; begin end;
function TWinControl.getParentWindow(): THandle; constref; begin end;
procedure TWinControl.setParentWindow(const Value: THandle); constref; begin end;
function TWinControl.getShowing(): Boolean; constref; begin end;
function TWinControl.getVisibleDockClientCount(): Integer; constref; begin end;
function TWinControl.AutoSizeDelayed(): boolean; constref; begin end;
function TWinControl.AutoSizeDelayedReport(): string; constref; begin end;
function TWinControl.AutoSizeDelayedHandle(): Boolean; constref; begin end;
procedure TWinControl.BeginUpdateBounds(); constref; begin end;
procedure TWinControl.EndUpdateBounds(); constref; begin end;
procedure TWinControl.LockRealizeBounds(); constref; begin end;
procedure TWinControl.UnlockRealizeBounds(); constref; begin end;
function TWinControl.ControlAtPos(const Pos: TPoint; AllowDisabled: Boolean): TControl; constref; begin end;
function TWinControl.ControlAtPos(const Pos: TPoint;AllowDisabled, AllowWinControls: Boolean): TControl; constref; overload; begin end;
function TWinControl.ContainsControl(Control: TControl): Boolean; constref; begin end;
procedure TWinControl.DoAdjustClientRectChange(const InvalidateRect: Boolean); constref; begin end;
procedure TWinControl.InvalidateClientRectCache(WithChildControls: boolean); constref; begin end;
function TWinControl.ClientRectNeedsInterfaceUpdate(): boolean; constref; begin end;
procedure TWinControl.SetBounds(ALeft, ATop, AWidth, AHeight: integer); constref; begin end;
function TWinControl.GetChildsRect(Scrolled: boolean): TRect; constref; begin end;
procedure TWinControl.DisableAlign(); constref; begin end;
procedure TWinControl.EnableAlign(); constref; begin end;
procedure TWinControl.ReAlign(); constref; begin end;
procedure TWinControl.ScrollBy(DeltaX, DeltaY: Integer); constref; begin end;
procedure TWinControl.WriteLayoutDebugReport(const Prefix: string); constref; begin end;
procedure TWinControl.Init(TheOwner: TComponent); begin end;
procedure TWinControl.CreateParented(AParentWindow: Thandle); constref; begin end;
function TWinControl.CanFocus(): Boolean; constref; begin end;
function TWinControl.GetControlIndex(AControl: TControl): integer; constref; begin end;
procedure TWinControl.SetControlIndex(AControl: TControl; NewIndex: integer); constref; begin end;
function TWinControl.Focused(): Boolean; constref; begin end;
function TWinControl.PerformTab(ForwardTab: boolean): boolean; constref; begin end;
function TWinControl.FindChildControl(const ControlName: String): TControl; constref; begin end;
procedure TWinControl.SelectNext(CurControl: TWinControl;GoForward, CheckTabStop: Boolean); constref; begin end;
function TWinControl.GetTextLen(): Integer; constref; begin end;
procedure TWinControl.Invalidate(); constref; begin end;
procedure TWinControl.AddControl(); constref; begin end;
procedure TWinControl.InsertControl(AControl: TControl); constref; begin end;
procedure TWinControl.InsertControl(AControl: TControl; Index: integer); constref; overload; begin end;
procedure TWinControl.RemoveControl(AControl: TControl); constref; begin end;
procedure TWinControl.Repaint(); constref; begin end;
procedure TWinControl.Update(); constref; begin end;
procedure TWinControl.SetFocus(); constref; begin end;
procedure TWinControl.FlipChildren(AllLevels: Boolean); constref; begin end;
procedure TWinControl.ScaleBy(Multiplier, Divider: Integer); constref; begin end;
function TWinControl.GetDockCaption(AControl: TControl): String; constref; begin end;
procedure TWinControl.UpdateDockCaption(Exclude: TControl); constref; begin end;
function TWinControl.HandleAllocated(): Boolean; constref; begin end;
function TWinControl.ParentHandlesAllocated(): boolean; constref; begin end;
procedure TWinControl.HandleNeeded(); constref; begin end;
function TWinControl.BrushCreated(): Boolean; constref; begin end;
procedure TWinControl.PaintTo(ACanvas: TCanvas; X, Y: Integer); constref; begin end;
procedure TWinControl.SetShape(AShape: TBitmap); constref; begin end;
procedure TWinControl.Free(); constref; begin end;
type TCustomControl = type TWinControl;
procedure TCustomControl.Init(AOwner: TComponent); begin end;
function TCustomControl.getCanvas(): TCanvas; constref; begin end;
procedure TCustomControl.setCanvas(const Value: TCanvas); constref; begin end;
function TCustomControl.getOnPaint(): TNotifyEvent; constref; begin end;
procedure TCustomControl.setOnPaint(const Value: TNotifyEvent); constref; begin end;
procedure TCustomControl.setBorderStyle(const Value: TFormBorderStyle); constref; begin end;
procedure TCustomControl.Free(); constref; begin end;
type TControlScrollBar = type TPersistent;
procedure TControlScrollBar.Init(AControl: TWinControl; AKind: TScrollBarKind); begin end;
procedure TControlScrollBar.Assign(Source: TPersistent); constref; begin end;
function TControlScrollBar.IsScrollBarVisible(): Boolean; constref; begin end;
function TControlScrollBar.ScrollPos(): Integer; constref; begin end;
function TControlScrollBar.GetOtherScrollBar(): TControlScrollBar; constref; begin end;
function TControlScrollBar.getSize(): integer; constref; begin end;
function TControlScrollBar.ClientSize(): integer; constref; begin end;
function TControlScrollBar.ClientSizeWithBar(): integer; constref; begin end;
function TControlScrollBar.ClientSizeWithoutBar(): integer; constref; begin end;
function TControlScrollBar.getIncrement(): Integer; constref; begin end;
procedure TControlScrollBar.setIncrement(const Value: Integer); constref; begin end;
function TControlScrollBar.getPage(): Integer; constref; begin end;
procedure TControlScrollBar.setPage(const Value: Integer); constref; begin end;
function TControlScrollBar.getSmooth(): Boolean; constref; begin end;
procedure TControlScrollBar.setSmooth(const Value: Boolean); constref; begin end;
function TControlScrollBar.getPosition(): Integer; constref; begin end;
procedure TControlScrollBar.setPosition(const Value: Integer); constref; begin end;
function TControlScrollBar.getRange(): Integer; constref; begin end;
procedure TControlScrollBar.setRange(const Value: Integer); constref; begin end;
function TControlScrollBar.getTracking(): Boolean; constref; begin end;
procedure TControlScrollBar.setTracking(const Value: Boolean); constref; begin end;
function TControlScrollBar.getVisible(): Boolean; constref; begin end;
procedure TControlScrollBar.setVisible(const Value: Boolean); constref; begin end;
procedure TControlScrollBar.Free(); constref; begin end;
type TScrollingWinControl = type TCustomControl;
procedure TScrollingWinControl.Init(TheOwner : TComponent); begin end;
procedure TScrollingWinControl.UpdateScrollbars(); constref; begin end;
procedure TScrollingWinControl.ScrollBy(DeltaX, DeltaY: Integer); constref; begin end;
function TScrollingWinControl.getHorzScrollBar(): TControlScrollBar; constref; begin end;
procedure TScrollingWinControl.setHorzScrollBar(const Value: TControlScrollBar); constref; begin end;
function TScrollingWinControl.getVertScrollBar(): TControlScrollBar; constref; begin end;
procedure TScrollingWinControl.setVertScrollBar(const Value: TControlScrollBar); constref; begin end;
procedure TScrollingWinControl.Free(); constref; begin end;
type TGraphicControl = type TControl;
procedure TGraphicControl.Update(); constref; begin end;
function TGraphicControl.getCanvas(): TCanvas; constref; begin end;
function TGraphicControl.getAlignment(): TAlign; constref; begin end;
procedure TGraphicControl.setAlignment(const Value: TAlign); constref; begin end;
type TCloseAction = (caNone, caHide, caFree, caMinimize);
type _TCloseEvent = procedure(Sender: TObject; var CloseAction: TCloseAction);
type _TCloseQueryEvent = procedure(Sender : TObject; var CanClose : boolean);
type TPosition = (poDesigned, poDefault, poDefaultPosOnly, poDefaultSizeOnly, poScreenCenter, poMainFormCenter, poOwnerFormCenter);
type TBorderIcon = (biSystemMenu, biMinimize, biMaximize, biHelp);
type TBorderIcons = set of TBorderIcon;
type TSizeConstraints = type TPersistent;
procedure TSizeConstraints.Init(AControl: TControl); begin end;
procedure TSizeConstraints.UpdateInterfaceConstraints(); constref; begin end;
procedure TSizeConstraints.SetInterfaceConstraints(MinW, MinH, MaxW, MaxH: integer); constref; begin end;
function TSizeConstraints.EffectiveMinWidth(): integer; constref; begin end;
function TSizeConstraints.EffectiveMinHeight(): integer; constref; begin end;
function TSizeConstraints.EffectiveMaxWidth(): integer; constref; begin end;
function TSizeConstraints.EffectiveMaxHeight(): integer; constref; begin end;
function TSizeConstraints.MinMaxWidth(Width: integer): integer; constref; begin end;
function TSizeConstraints.MinMaxHeight(Height: integer): integer; constref; begin end;
function TSizeConstraints.getMaxInterfaceHeight(): integer; constref; begin end;
function TSizeConstraints.getMaxInterfaceWidth(): integer; constref; begin end;
function TSizeConstraints.getMinInterfaceHeight(): integer; constref; begin end;
function TSizeConstraints.getMinInterfaceWidth(): integer; constref; begin end;
function TSizeConstraints.getControl(): TControl; constref; begin end;
function TSizeConstraints.getOnChange(): TNotifyEvent; constref; begin end;
procedure TSizeConstraints.setOnChange(const Value: TNotifyEvent); constref; begin end;
function TSizeConstraints.getMaxHeight(): Integer; constref; begin end;
procedure TSizeConstraints.setMaxHeight(const Value: Integer); constref; begin end;
function TSizeConstraints.getMaxWidth(): Integer; constref; begin end;
procedure TSizeConstraints.setMaxWidth(const Value: Integer); constref; begin end;
function TSizeConstraints.getMinHeight(): Integer; constref; begin end;
procedure TSizeConstraints.setMinHeight(const Value: Integer); constref; begin end;
function TSizeConstraints.getMinWidth(): Integer; constref; begin end;
procedure TSizeConstraints.setMinWidth(const Value: Integer); constref; begin end;
procedure TSizeConstraints.Free(); constref; begin end;
type TCustomForm = type TScrollingWinControl;
procedure TCustomForm.Init(AOwner: TComponent); begin end;
procedure TCustomForm.InitNew(AOwner: TComponent; Num: Integer); begin end;
procedure TCustomForm.AfterConstruction(); constref; begin end;
procedure TCustomForm.BeforeDestruction(); constref; begin end;
procedure TCustomForm.Close(); constref; begin end;
function TCustomForm.CloseQuery(): boolean; constref; begin end;
procedure TCustomForm.DefocusControl(Control: TWinControl; Removing: Boolean); constref; begin end;
procedure TCustomForm.DestroyWnd(); constref; begin end;
procedure TCustomForm.EnsureVisible(AMoveToTop: Boolean); constref; begin end;
procedure TCustomForm.FocusControl(WinControl: TWinControl); constref; begin end;
function TCustomForm.FormIsUpdating(): boolean; constref; begin end;
function TCustomForm.GetFormImage(): TBitmap; constref; begin end;
procedure TCustomForm.Hide(); constref; begin end;
procedure TCustomForm.IntfDropFiles(const FileNames: TStringArray); constref; begin end;
procedure TCustomForm.IntfHelp(AComponent: TComponent); constref; begin end;
function TCustomForm.AutoSizeDelayedHandle(): Boolean; constref; begin end;
procedure TCustomForm.GetPreferredSize(var PreferredWidth, PreferredHeight: integer;Raw,WithThemeSpace: boolean ); constref; begin end;
procedure TCustomForm.Release(); constref; begin end;
function TCustomForm.CanFocus(): Boolean; constref; begin end;
procedure TCustomForm.SetFocus(); constref; begin end;
function TCustomForm.SetFocusedControl(Control: TWinControl): Boolean; constref; begin end;
procedure TCustomForm.SetRestoredBounds(ALeft, ATop, AWidth, AHeight: integer); constref; begin end;
procedure TCustomForm.Show(); constref; begin end;
function TCustomForm.ShowModal(): Integer; constref; begin end;
procedure TCustomForm.ShowOnTop(); constref; begin end;
procedure TCustomForm.RemoveAllHandlersOfObject(AnObject: TObject); constref; begin end;
procedure TCustomForm.AddHandlerFirstShow(OnFirstShowHandler: TNotifyEvent;AsFirst: Boolean); constref; begin end;
procedure TCustomForm.RemoveHandlerFirstShow(OnFirstShowHandler: TNotifyEvent); constref; begin end;
procedure TCustomForm.AddHandlerClose(OnCloseHandler: TCloseEvent; AsFirst: Boolean); constref; begin end;
procedure TCustomForm.RemoveHandlerClose(OnCloseHandler: TCloseEvent); constref; begin end;
procedure TCustomForm.AddHandlerCreate(OnCreateHandler: TNotifyEvent; AsFirst: Boolean); constref; begin end;
procedure TCustomForm.RemoveHandlerCreate(OnCreateHandler: TNotifyEvent); constref; begin end;
function TCustomForm.getBorderStyle(): TFormBorderStyle; constref; begin end;
procedure TCustomForm.setBorderStyle(const Value: TFormBorderStyle); constref; begin end;
function TCustomForm.getBorderIcons(): TBorderIcons; constref; begin end;
procedure TCustomForm.setBorderIcons(const Value: TBorderIcons); constref; begin end;
function TCustomForm.getActive(): Boolean; constref; begin end;
function TCustomForm.getActiveControl(): TWinControl; constref; begin end;
procedure TCustomForm.setActiveControl(const Value: TWinControl); constref; begin end;
function TCustomForm.getActiveDefaultControl(): TControl; constref; begin end;
procedure TCustomForm.setActiveDefaultControl(const Value: TControl); constref; begin end;
function TCustomForm.getAllowDropFiles(): Boolean; constref; begin end;
procedure TCustomForm.setAllowDropFiles(const Value: Boolean); constref; begin end;
function TCustomForm.getAlphaBlend(): Boolean; constref; begin end;
procedure TCustomForm.setAlphaBlend(const Value: Boolean); constref; begin end;
function TCustomForm.getAlphaBlendValue(): Byte; constref; begin end;
procedure TCustomForm.setAlphaBlendValue(const Value: Byte); constref; begin end;
function TCustomForm.getCancelControl(): TControl; constref; begin end;
procedure TCustomForm.setCancelControl(const Value: TControl); constref; begin end;
function TCustomForm.getDefaultControl(): TControl; constref; begin end;
procedure TCustomForm.setDefaultControl(const Value: TControl); constref; begin end;
function TCustomForm.getKeyPreview(): Boolean; constref; begin end;
procedure TCustomForm.setKeyPreview(const Value: Boolean); constref; begin end;
function TCustomForm.getPopupParent(): TCustomForm; constref; begin end;
procedure TCustomForm.setPopupParent(const Value: TCustomForm); constref; begin end;
function TCustomForm.getOnActivate(): TNotifyEvent; constref; begin end;
procedure TCustomForm.setOnActivate(const Value: TNotifyEvent); constref; begin end;
function TCustomForm.getOnClose(): TCloseEvent; constref; begin end;
procedure TCustomForm.setOnClose(const Value: TCloseEvent); constref; begin end;
function TCustomForm.getOnCloseQuery(): TCloseQueryEvent; constref; begin end;
procedure TCustomForm.setOnCloseQuery(const Value: TCloseQueryEvent); constref; begin end;
function TCustomForm.getOnCreate(): TNotifyEvent; constref; begin end;
procedure TCustomForm.setOnCreate(const Value: TNotifyEvent); constref; begin end;
function TCustomForm.getOnDeactivate(): TNotifyEvent; constref; begin end;
procedure TCustomForm.setOnDeactivate(const Value: TNotifyEvent); constref; begin end;
function TCustomForm.getOnDestroy(): TNotifyEvent; constref; begin end;
procedure TCustomForm.setOnDestroy(const Value: TNotifyEvent); constref; begin end;
function TCustomForm.getOnHide(): TNotifyEvent; constref; begin end;
procedure TCustomForm.setOnHide(const Value: TNotifyEvent); constref; begin end;
function TCustomForm.getOnShow(): TNotifyEvent; constref; begin end;
procedure TCustomForm.setOnShow(const Value: TNotifyEvent); constref; begin end;
function TCustomForm.getOnWindowStateChange(): TNotifyEvent; constref; begin end;
procedure TCustomForm.setOnWindowStateChange(const Value: TNotifyEvent); constref; begin end;
function TCustomForm.getPixelsPerInch(): Longint; constref; begin end;
procedure TCustomForm.setPixelsPerInch(const Value: Longint); constref; begin end;
function TCustomForm.getRestoredLeft(): integer; constref; begin end;
function TCustomForm.getRestoredTop(): integer; constref; begin end;
function TCustomForm.getRestoredWidth(): integer; constref; begin end;
function TCustomForm.getRestoredHeight(): integer; constref; begin end;
function TCustomForm.getConstraints(): TSizeConstraints; constref; begin end;
procedure TCustomForm.setConstraints(const Value: TSizeConstraints); constref; begin end;
procedure TCustomForm.Free(); constref; begin end;
type TForm = type TCustomForm;
procedure TForm.Init(TheOwner: TComponent); begin end;
procedure TForm.Cascade(); constref; begin end;
procedure TForm.Next(); constref; begin end;
procedure TForm.Previous(); constref; begin end;
procedure TForm.Tile(); constref; begin end;
procedure TForm.Show(); constref; begin end;
procedure TForm.Close(); constref; begin end;
procedure TForm.Hide(); constref; begin end;
function TForm.getClientWidth(): Integer; constref; begin end;
procedure TForm.setClientWidth(const Value: Integer); constref; begin end;
function TForm.getClientHeight(): Integer; constref; begin end;
procedure TForm.setClientHeight(const Value: Integer); constref; begin end;
function TForm.getOnClose(): TCloseEvent; constref; begin end;
procedure TForm.setOnClose(const Value: TCloseEvent); constref; begin end;
function TForm.getOnCreate(): TNotifyEvent; constref; begin end;
procedure TForm.setOnCreate(const Value: TNotifyEvent); constref; begin end;
function TForm.getOnDestroy(): TNotifyEvent; constref; begin end;
procedure TForm.setOnDestroy(const Value: TNotifyEvent); constref; begin end;
function TForm.getOnHide(): TNotifyEvent; constref; begin end;
procedure TForm.setOnHide(const Value: TNotifyEvent); constref; begin end;
function TForm.getOnPaint(): TNotifyEvent; constref; begin end;
procedure TForm.setOnPaint(const Value: TNotifyEvent); constref; begin end;
function TForm.getOnShow(): TNotifyEvent; constref; begin end;
procedure TForm.setOnShow(const Value: TNotifyEvent); constref; begin end;
function TForm.getOnDblClick(): TNotifyEvent; constref; begin end;
procedure TForm.setOnDblClick(const Value: TNotifyEvent); constref; begin end;
function TForm.getOnEnter(): TNotifyEvent; constref; begin end;
procedure TForm.setOnEnter(const Value: TNotifyEvent); constref; begin end;
function TForm.getOnExit(): TNotifyEvent; constref; begin end;
procedure TForm.setOnExit(const Value: TNotifyEvent); constref; begin end;
function TForm.getOnClick(): TNotifyEvent; constref; begin end;
procedure TForm.setOnClick(const Value: TNotifyEvent); constref; begin end;
function TForm.getOnResize(): TNotifyEvent; constref; begin end;
procedure TForm.setOnResize(const Value: TNotifyEvent); constref; begin end;
function TForm.getEnabled(): Boolean; constref; begin end;
procedure TForm.setEnabled(const Value: Boolean); constref; begin end;
function TForm.getFont(): TFont; constref; begin end;
procedure TForm.setFont(const Value: TFont); constref; begin end;
function TForm.getVisible(): Boolean; constref; begin end;
procedure TForm.setVisible(const Value: Boolean); constref; begin end;
function TForm.getCanvas(): TCanvas; constref; begin end;
procedure TForm.setCanvas(const Value: TCanvas); constref; begin end;
function TForm.getLeft(): Integer; constref; begin end;
procedure TForm.setLeft(const Value: Integer); constref; begin end;
function TForm.getHeight(): Integer; constref; begin end;
procedure TForm.setHeight(const Value: Integer); constref; begin end;
function TForm.getTop(): Integer; constref; begin end;
procedure TForm.setTop(const Value: Integer); constref; begin end;
function TForm.getWidth(): Integer; constref; begin end;
procedure TForm.setWidth(const Value: Integer); constref; begin end;
function TForm.getCaption(): string; constref; begin end;
procedure TForm.setCaption(const Value: string); constref; begin end;
function TForm.getPosition(): TPosition; constref; begin end;
procedure TForm.setPosition(const Value: TPosition); constref; begin end;
procedure TForm.Free(); constref; begin end;
function TForm.getOnMouseMove(): TMouseMoveEvent; constref; begin end;
procedure TForm.setOnMouseMove(const Value: TMouseMoveEvent); constref; begin end;
type TScrollBox = type TScrollingWinControl;
procedure TScrollBox.Init(AOwner: TComponent); begin end;
procedure TScrollBox.Free(); constref; begin end;
type TScrollStyle = (ssNone, ssHorizontal, ssVertical, ssBoth,ssAutoHorizontal, ssAutoVertical, ssAutoBoth);
type TScrollCode = (scLineUp,scLineDown, scPageUp,scPageDown,scPosition, scTrack,scTop,scBottom,scEndScroll);
type _TScrollEvent = procedure(Sender: TObject; ScrollCode: TScrollCode; var ScrollPos: Integer);
type TOwnerDrawStateType = (odSelected, odGrayed, odDisabled, odChecked, odFocused, odDefault, odHotLight, odInactive, odNoAccel, odNoFocusRect, odReserved1, odReserved2, odComboBoxEdit, odPainted);
type TOwnerDrawState = set of TOwnerDrawStateType;
type _TDrawItemEvent = procedure(Control: TWinControl; Index: Integer; ARect: TRect; State: TOwnerDrawState);
type TComboBoxStyle = (csDropDown,csSimple,csDropDownList,csOwnerDrawFixed,csOwnerDrawVariable);
type TListBoxStyle = (lbStandard, lbOwnerDrawFixed, lbOwnerDrawVariable, lbVirtual);
type TStaticBorderStyle = (sbsNone, sbsSingle, sbsSunken);
type TAlignment = (taLeftJustify, taRightJustify, taCenter);
type TCheckBoxState = (cbUnchecked, cbChecked, cbGrayed);
type TButtonLayout = (blGlyphLeft, blGlyphRight, blGlyphTop, blGlyphBottom);
type TCustomScrollBar = type TWinControl;
procedure TCustomScrollBar.Init(AOwner: TComponent); begin end;
procedure TCustomScrollBar.SetParams(APosition, AMin, AMax, APageSize: Integer); constref; begin end;
procedure TCustomScrollBar.SetParams(APosition, AMin, AMax: Integer); constref; overload; begin end;
function TCustomScrollBar.getKind(): TScrollBarKind; constref; begin end;
procedure TCustomScrollBar.setKind(const Value: TScrollBarKind); constref; begin end;
function TCustomScrollBar.getLargeChange(): integer; constref; begin end;
procedure TCustomScrollBar.setLargeChange(const Value: integer); constref; begin end;
function TCustomScrollBar.getMax(): Integer; constref; begin end;
procedure TCustomScrollBar.setMax(const Value: Integer); constref; begin end;
function TCustomScrollBar.getMin(): Integer; constref; begin end;
procedure TCustomScrollBar.setMin(const Value: Integer); constref; begin end;
function TCustomScrollBar.getPageSize(): Integer; constref; begin end;
procedure TCustomScrollBar.setPageSize(const Value: Integer); constref; begin end;
function TCustomScrollBar.getPosition(): Integer; constref; begin end;
procedure TCustomScrollBar.setPosition(const Value: Integer); constref; begin end;
function TCustomScrollBar.getSmallChange(): integer; constref; begin end;
procedure TCustomScrollBar.setSmallChange(const Value: integer); constref; begin end;
function TCustomScrollBar.getOnChange(): TNotifyEvent; constref; begin end;
procedure TCustomScrollBar.setOnChange(const Value: TNotifyEvent); constref; begin end;
function TCustomScrollBar.getOnScroll(): TScrollEvent; constref; begin end;
procedure TCustomScrollBar.setOnScroll(const Value: TScrollEvent); constref; begin end;
procedure TCustomScrollBar.Free(); constref; begin end;
type TScrollBar = type TCustomScrollBar;
procedure TScrollBar.Init(AOwner: TComponent); begin end;
procedure TScrollBar.Free(); constref; begin end;
type TCustomComboBox = type TWinControl;
procedure TCustomComboBox.Init(TheOwner: TComponent); begin end;
procedure TCustomComboBox.IntfGetItems(); constref; begin end;
procedure TCustomComboBox.AddItem(const Item: String; AnObject: TObject); constref; begin end;
procedure TCustomComboBox.AddHistoryItem(const Item: string; MaxHistoryCount: integer;SetAsText, CaseSensitive: boolean); constref; begin end;
procedure TCustomComboBox.AddHistoryItem(const Item: string; AnObject: TObject;MaxHistoryCount: integer; SetAsText, CaseSensitive: boolean); constref; overload; begin end;
procedure TCustomComboBox.Clear(); constref; begin end;
procedure TCustomComboBox.ClearSelection(); constref; begin end;
function TCustomComboBox.getDroppedDown(): Boolean; constref; begin end;
procedure TCustomComboBox.setDroppedDown(const Value: Boolean); constref; begin end;
procedure TCustomComboBox.SelectAll(); constref; begin end;
function TCustomComboBox.getAutoComplete(): boolean; constref; begin end;
procedure TCustomComboBox.setAutoComplete(const Value: boolean); constref; begin end;
function TCustomComboBox.getAutoDropDown(): Boolean; constref; begin end;
procedure TCustomComboBox.setAutoDropDown(const Value: Boolean); constref; begin end;
function TCustomComboBox.getAutoSelect(): Boolean; constref; begin end;
procedure TCustomComboBox.setAutoSelect(const Value: Boolean); constref; begin end;
function TCustomComboBox.getAutoSelected(): Boolean; constref; begin end;
procedure TCustomComboBox.setAutoSelected(const Value: Boolean); constref; begin end;
function TCustomComboBox.getArrowKeysTraverseList(): Boolean; constref; begin end;
procedure TCustomComboBox.setArrowKeysTraverseList(const Value: Boolean); constref; begin end;
function TCustomComboBox.getCanvas(): TCanvas; constref; begin end;
function TCustomComboBox.getDropDownCount(): Integer; constref; begin end;
procedure TCustomComboBox.setDropDownCount(const Value: Integer); constref; begin end;
function TCustomComboBox.getItems(): TStrings; constref; begin end;
procedure TCustomComboBox.setItems(const Value: TStrings); constref; begin end;
function TCustomComboBox.getItemIndex(): integer; constref; begin end;
procedure TCustomComboBox.setItemIndex(const Value: integer); constref; begin end;
function TCustomComboBox.getReadOnly(): Boolean; constref; begin end;
procedure TCustomComboBox.setReadOnly(const Value: Boolean); constref; begin end;
function TCustomComboBox.getSelLength(): integer; constref; begin end;
procedure TCustomComboBox.setSelLength(const Value: integer); constref; begin end;
function TCustomComboBox.getSelStart(): integer; constref; begin end;
procedure TCustomComboBox.setSelStart(const Value: integer); constref; begin end;
function TCustomComboBox.getSelText(): String; constref; begin end;
procedure TCustomComboBox.setSelText(const Value: String); constref; begin end;
function TCustomComboBox.getStyle(): TComboBoxStyle; constref; begin end;
procedure TCustomComboBox.setStyle(const Value: TComboBoxStyle); constref; begin end;
function TCustomComboBox.getText(): string; constref; begin end;
procedure TCustomComboBox.setText(const Value: string); constref; begin end;
procedure TCustomComboBox.Free(); constref; begin end;
type TComboBox = type TCustomComboBox;
procedure TComboBox.Init(TheOwner: TComponent); begin end;
procedure TComboBox.Free(); constref; begin end;
type TCustomListBox = type TWinControl;
procedure TCustomListBox.Init(TheOwner: TComponent); begin end;
procedure TCustomListBox.AddItem(const Item: String; AnObject: TObject); constref; begin end;
procedure TCustomListBox.Click(); constref; begin end;
procedure TCustomListBox.Clear(); constref; begin end;
procedure TCustomListBox.ClearSelection(); constref; begin end;
function TCustomListBox.GetIndexAtXY(X, Y: integer): integer; constref; begin end;
function TCustomListBox.GetIndexAtY(Y: integer): integer; constref; begin end;
function TCustomListBox.GetSelectedText(): string; constref; begin end;
function TCustomListBox.ItemAtPos(const Pos: TPoint; Existing: Boolean): Integer; constref; begin end;
function TCustomListBox.ItemRect(Index: Integer): TRect; constref; begin end;
function TCustomListBox.ItemVisible(Index: Integer): boolean; constref; begin end;
function TCustomListBox.ItemFullyVisible(Index: Integer): boolean; constref; begin end;
procedure TCustomListBox.LockSelectionChange(); constref; begin end;
procedure TCustomListBox.MakeCurrentVisible(); constref; begin end;
procedure TCustomListBox.MeasureItem(Index: Integer; var TheHeight: Integer); constref; begin end;
procedure TCustomListBox.SelectAll(); constref; begin end;
procedure TCustomListBox.UnlockSelectionChange(); constref; begin end;
function TCustomListBox.getCanvas(): TCanvas; constref; begin end;
function TCustomListBox.getClickOnSelChange(): boolean; constref; begin end;
procedure TCustomListBox.setClickOnSelChange(const Value: boolean); constref; begin end;
function TCustomListBox.getColumns(): Integer; constref; begin end;
procedure TCustomListBox.setColumns(const Value: Integer); constref; begin end;
function TCustomListBox.getCount(): Integer; constref; begin end;
function TCustomListBox.getExtendedSelect(): boolean; constref; begin end;
procedure TCustomListBox.setExtendedSelect(const Value: boolean); constref; begin end;
function TCustomListBox.getItemHeight(): Integer; constref; begin end;
procedure TCustomListBox.setItemHeight(const Value: Integer); constref; begin end;
function TCustomListBox.getItemIndex(): integer; constref; begin end;
procedure TCustomListBox.setItemIndex(const Value: integer); constref; begin end;
function TCustomListBox.getItems(): TStrings; constref; begin end;
procedure TCustomListBox.setItems(const Value: TStrings); constref; begin end;
function TCustomListBox.getMultiSelect(): boolean; constref; begin end;
procedure TCustomListBox.setMultiSelect(const Value: boolean); constref; begin end;
function TCustomListBox.getScrollWidth(): Integer; constref; begin end;
procedure TCustomListBox.setScrollWidth(const Value: Integer); constref; begin end;
function TCustomListBox.getSelCount(): integer; constref; begin end;
function TCustomListBox.getSorted(): boolean; constref; begin end;
procedure TCustomListBox.setSorted(const Value: boolean); constref; begin end;
function TCustomListBox.getTopIndex(): Integer; constref; begin end;
procedure TCustomListBox.setTopIndex(const Value: Integer); constref; begin end;
procedure TCustomListBox.setOnDrawItem(const Value: TDrawItemEvent); constref; begin end;
function TCustomListBox.getStyle(): TListBoxStyle; constref; begin end;
procedure TCustomListBox.setStyle(const Value: TListBoxStyle); constref; begin end;
procedure TCustomListBox.Free(); constref; begin end;
type TListBox = type TCustomListBox;
procedure TListBox.Init(TheOwner: TComponent); begin end;
procedure TListBox.Free(); constref; begin end;
type TCustomEdit = type TWinControl;
procedure TCustomEdit.Init(AOwner: TComponent); begin end;
procedure TCustomEdit.Clear(); constref; begin end;
procedure TCustomEdit.SelectAll(); constref; begin end;
procedure TCustomEdit.ClearSelection(); constref; begin end;
procedure TCustomEdit.CopyToClipboard(); constref; begin end;
procedure TCustomEdit.CutToClipboard(); constref; begin end;
procedure TCustomEdit.PasteFromClipboard(); constref; begin end;
procedure TCustomEdit.Undo(); constref; begin end;
function TCustomEdit.getCanUndo(): Boolean; constref; begin end;
function TCustomEdit.getCaretPos(): TPoint; constref; begin end;
procedure TCustomEdit.setCaretPos(const Value: TPoint); constref; begin end;
function TCustomEdit.getHideSelection(): Boolean; constref; begin end;
procedure TCustomEdit.setHideSelection(const Value: Boolean); constref; begin end;
function TCustomEdit.getMaxLength(): Integer; constref; begin end;
procedure TCustomEdit.setMaxLength(const Value: Integer); constref; begin end;
function TCustomEdit.getModified(): Boolean; constref; begin end;
procedure TCustomEdit.setModified(const Value: Boolean); constref; begin end;
function TCustomEdit.getOnChange(): TNotifyEvent; constref; begin end;
procedure TCustomEdit.setOnChange(const Value: TNotifyEvent); constref; begin end;
function TCustomEdit.getPasswordChar(): Char; constref; begin end;
procedure TCustomEdit.setPasswordChar(const Value: Char); constref; begin end;
function TCustomEdit.getReadOnly(): Boolean; constref; begin end;
procedure TCustomEdit.setReadOnly(const Value: Boolean); constref; begin end;
function TCustomEdit.getSelLength(): integer; constref; begin end;
procedure TCustomEdit.setSelLength(const Value: integer); constref; begin end;
function TCustomEdit.getSelStart(): integer; constref; begin end;
procedure TCustomEdit.setSelStart(const Value: integer); constref; begin end;
function TCustomEdit.getSelText(): String; constref; begin end;
procedure TCustomEdit.setSelText(const Value: String); constref; begin end;
function TCustomEdit.getText(): string; constref; begin end;
procedure TCustomEdit.setText(const Value: string); constref; begin end;
procedure TCustomEdit.Free(); constref; begin end;
type TEdit = type TCustomEdit;
function TEdit.getOnEditingDone(): TNotifyEvent; constref; begin end;
procedure TEdit.setOnEditingDone(const Value: TNotifyEvent); constref; begin end;
procedure TEdit.Init(AOwner: TComponent); begin end;
procedure TEdit.Free(); constref; begin end;
type TCustomGroupBox = type TWinControl;
procedure TCustomGroupBox.Init(AOwner: TComponent); begin end;
procedure TCustomGroupBox.Free(); constref; begin end;
type TGroupBox = type TCustomGroupBox;
procedure TGroupBox.Init(AOwner: TComponent); begin end;
procedure TGroupBox.Free(); constref; begin end;
type TMemoScrollbar = type TControlScrollBar;
procedure TMemoScrollbar.Init(AControl: TWinControl; AKind: TScrollBarKind); begin end;
procedure TMemoScrollbar.Free(); constref; begin end;
type TCustomMemo = type TCustomEdit;
procedure TCustomMemo.Init(AOwner: TComponent); begin end;
procedure TCustomMemo.Append(const Value: String); constref; begin end;
function TCustomMemo.getLines(): TStrings; constref; begin end;
procedure TCustomMemo.setLines(const Value: TStrings); constref; begin end;
function TCustomMemo.getHorzScrollBar(): TMemoScrollBar; constref; begin end;
procedure TCustomMemo.setHorzScrollBar(const Value: TMemoScrollBar); constref; begin end;
function TCustomMemo.getVertScrollBar(): TMemoScrollBar; constref; begin end;
procedure TCustomMemo.setVertScrollBar(const Value: TMemoScrollBar); constref; begin end;
function TCustomMemo.getScrollBars(): TScrollStyle; constref; begin end;
procedure TCustomMemo.setScrollBars(const Value: TScrollStyle); constref; begin end;
function TCustomMemo.getWantReturns(): Boolean; constref; begin end;
procedure TCustomMemo.setWantReturns(const Value: Boolean); constref; begin end;
function TCustomMemo.getWantTabs(): Boolean; constref; begin end;
procedure TCustomMemo.setWantTabs(const Value: Boolean); constref; begin end;
function TCustomMemo.getWordWrap(): Boolean; constref; begin end;
procedure TCustomMemo.setWordWrap(const Value: Boolean); constref; begin end;
procedure TCustomMemo.Free(); constref; begin end;
type TMemo = type TCustomMemo;
procedure TMemo.Init(AOwner: TComponent); begin end;
procedure TMemo.Free(); constref; begin end;
type TCustomStaticText = type TWinControl;
procedure TCustomStaticText.Init(AOwner: TComponent); begin end;
function TCustomStaticText.getAlignment(): TAlignment; constref; begin end;
procedure TCustomStaticText.setAlignment(const Value: TAlignment); constref; begin end;
function TCustomStaticText.getBorderStyle(): TStaticBorderStyle; constref; begin end;
procedure TCustomStaticText.setBorderStyle(const Value: TStaticBorderStyle); constref; begin end;
function TCustomStaticText.getFocusControl(): TWinControl; constref; begin end;
procedure TCustomStaticText.setFocusControl(const Value: TWinControl); constref; begin end;
function TCustomStaticText.getShowAccelChar(): boolean; constref; begin end;
procedure TCustomStaticText.setShowAccelChar(const Value: boolean); constref; begin end;
function TCustomStaticText.getTransparent(): Boolean; constref; begin end;
procedure TCustomStaticText.setTransparent(const Value: Boolean); constref; begin end;
procedure TCustomStaticText.Free(); constref; begin end;
type TStaticText = type TCustomStaticText;
procedure TStaticText.Init(AOwner: TComponent); begin end;
procedure TStaticText.Free(); constref; begin end;
type TButtonControl = type TWinControl;
procedure TButtonControl.Init(TheOwner: TComponent); begin end;
procedure TButtonControl.Free(); constref; begin end;
type TCustomButton = type TButtonControl;
procedure TCustomButton.Init(TheOwner: TComponent); begin end;
procedure TCustomButton.ExecuteDefaultAction(); constref; begin end;
procedure TCustomButton.ExecuteCancelAction(); constref; begin end;
procedure TCustomButton.ActiveDefaultControlChanged(NewControl: TControl); constref; begin end;
procedure TCustomButton.UpdateRolesForForm(); constref; begin end;
function TCustomButton.UseRightToLeftAlignment(): Boolean; constref; begin end;
function TCustomButton.getActive(): boolean; constref; begin end;
function TCustomButton.getDefault(): Boolean; constref; begin end;
procedure TCustomButton.setDefault(const Value: Boolean); constref; begin end;
function TCustomButton.getCancel(): Boolean; constref; begin end;
procedure TCustomButton.setCancel(const Value: Boolean); constref; begin end;
procedure TCustomButton.Free(); constref; begin end;
type TButton = type TCustomButton;
procedure TButton.Init(TheOwner: TComponent); begin end;
procedure TButton.Free(); constref; begin end;
type TCustomCheckBox = type TButtonControl;
procedure TCustomCheckBox.Init(TheOwner: TComponent); begin end;
function TCustomCheckBox.getAllowGrayed(): Boolean; constref; begin end;
procedure TCustomCheckBox.setAllowGrayed(const Value: Boolean); constref; begin end;
function TCustomCheckBox.getState(): TCheckBoxState; constref; begin end;
procedure TCustomCheckBox.setState(const Value: TCheckBoxState); constref; begin end;
function TCustomCheckBox.getOnChange(): TNotifyEvent; constref; begin end;
procedure TCustomCheckBox.setOnChange(const Value: TNotifyEvent); constref; begin end;
procedure TCustomCheckBox.Free(); constref; begin end;
type TCheckBox = type TCustomCheckBox;
procedure TCheckBox.Init(TheOwner: TComponent); begin end;
procedure TCheckBox.Free(); constref; begin end;
type TCustomLabel = type TGraphicControl;
procedure TCustomLabel.Init(TheOwner: TComponent); begin end;
function TCustomLabel.ColorIsStored(): boolean; constref; begin end;
function TCustomLabel.AdjustFontForOptimalFill(): Boolean; constref; begin end;
procedure TCustomLabel.Paint(); constref; begin end;
procedure TCustomLabel.SetBounds(aLeft, aTop, aWidth, aHeight: integer); constref; begin end;
procedure TCustomLabel.Free(); constref; begin end;
type TLabel = type TCustomLabel;
procedure TLabel.Init(TheOwner: TComponent); begin end;
procedure TLabel.Free(); constref; begin end;
type TCustomSpeedButton = type TGraphicControl;
function TCustomSpeedButton.FindDownButton(): TCustomSpeedButton; constref; begin end;
procedure TCustomSpeedButton.LoadGlyphFromLazarusResource(const AName: String); constref; begin end;
function TCustomSpeedButton.getAllowAllUp(): Boolean; constref; begin end;
procedure TCustomSpeedButton.setAllowAllUp(const Value: Boolean); constref; begin end;
function TCustomSpeedButton.getDown(): Boolean; constref; begin end;
procedure TCustomSpeedButton.setDown(const Value: Boolean); constref; begin end;
function TCustomSpeedButton.getFlat(): Boolean; constref; begin end;
procedure TCustomSpeedButton.setFlat(const Value: Boolean); constref; begin end;
function TCustomSpeedButton.getGlyph(): TBitmap; constref; begin end;
procedure TCustomSpeedButton.setGlyph(const Value: TBitmap); constref; begin end;
function TCustomSpeedButton.getGroupIndex(): Integer; constref; begin end;
procedure TCustomSpeedButton.setGroupIndex(const Value: Integer); constref; begin end;
function TCustomSpeedButton.getLayout(): TButtonLayout; constref; begin end;
procedure TCustomSpeedButton.setLayout(const Value: TButtonLayout); constref; begin end;
function TCustomSpeedButton.getMargin(): integer; constref; begin end;
procedure TCustomSpeedButton.setMargin(const Value: integer); constref; begin end;
function TCustomSpeedButton.getNumGlyphs(): Integer; constref; begin end;
procedure TCustomSpeedButton.setNumGlyphs(const Value: Integer); constref; begin end;
function TCustomSpeedButton.getShowAccelChar(): boolean; constref; begin end;
procedure TCustomSpeedButton.setShowAccelChar(const Value: boolean); constref; begin end;
function TCustomSpeedButton.getShowCaption(): boolean; constref; begin end;
procedure TCustomSpeedButton.setShowCaption(const Value: boolean); constref; begin end;
function TCustomSpeedButton.getSpacing(): integer; constref; begin end;
procedure TCustomSpeedButton.setSpacing(const Value: integer); constref; begin end;
function TCustomSpeedButton.getTransparent(): Boolean; constref; begin end;
procedure TCustomSpeedButton.setTransparent(const Value: Boolean); constref; begin end;
procedure TCustomSpeedButton.Init(AOwner: TComponent); begin end;
procedure TCustomSpeedButton.Free(); constref; begin end;
type TSpeedButton = type TCustomSpeedButton;
procedure TSpeedButton.Init(AOwner: TComponent); begin end;
procedure TSpeedButton.Free(); constref; begin end;
type TGraphicsBevelCut = (bvNone, bvLowered, bvRaised, bvSpace);
type TBevelCut = TGraphicsBevelCut;
type TPanelBevel = TBevelCut;
type TBevelWidth = Integer;
type TShapeType = (stRectangle, stSquare, stRoundRect, stRoundSquare, stEllipse, stCircle, stSquaredDiamond, stDiamond, stTriangle);
type TCustomTimer = type TComponent;
procedure TCustomTimer.Init(AOwner: TComponent); begin end;
function TCustomTimer.getEnabled(): Boolean; constref; begin end;
procedure TCustomTimer.setEnabled(const Value: Boolean); constref; begin end;
function TCustomTimer.getInterval(): Cardinal; constref; begin end;
procedure TCustomTimer.setInterval(const Value: Cardinal); constref; begin end;
function TCustomTimer.getOnTimer(): TNotifyEvent; constref; begin end;
procedure TCustomTimer.setOnTimer(const Value: TNotifyEvent); constref; begin end;
function TCustomTimer.getOnStartTimer(): TNotifyEvent; constref; begin end;
procedure TCustomTimer.setOnStartTimer(const Value: TNotifyEvent); constref; begin end;
function TCustomTimer.getOnStopTimer(): TNotifyEvent; constref; begin end;
procedure TCustomTimer.setOnStopTimer(const Value: TNotifyEvent); constref; begin end;
procedure TCustomTimer.Free(); constref; begin end;
type TTimer = type TCustomTimer;
procedure TTimer.Init(AOwner: TComponent); begin end;
procedure TTimer.Free(); constref; begin end;
type TCustomImage = type TGraphicControl;
procedure TCustomImage.Init(AOwner: TComponent); begin end;
function TCustomImage.getCanvas(): TCanvas; constref; begin end;
function TCustomImage.DestRect(): TRect; constref; begin end;
function TCustomImage.getCenter(): Boolean; constref; begin end;
procedure TCustomImage.setCenter(const Value: Boolean); constref; begin end;
function TCustomImage.getPicture(): TPicture; constref; begin end;
procedure TCustomImage.setPicture(const Value: TPicture); constref; begin end;
function TCustomImage.getStretch(): Boolean; constref; begin end;
procedure TCustomImage.setStretch(const Value: Boolean); constref; begin end;
function TCustomImage.getTransparent(): Boolean; constref; begin end;
procedure TCustomImage.setTransparent(const Value: Boolean); constref; begin end;
function TCustomImage.getProportional(): Boolean; constref; begin end;
procedure TCustomImage.setProportional(const Value: Boolean); constref; begin end;
function TCustomImage.getOnPictureChanged(): TNotifyEvent; constref; begin end;
procedure TCustomImage.setOnPictureChanged(const Value: TNotifyEvent); constref; begin end;
procedure TCustomImage.setOnMouseDown(const Value: TMouseEvent); constref; begin end;
procedure TCustomImage.setOnMouseUp(const Value: TMouseEvent); constref; begin end;
procedure TCustomImage.Free(); constref; begin end;
type TImage = type TCustomImage;
procedure TImage.Init(AOwner: TComponent); begin end;
procedure TImage.Free(); constref; begin end;
function TImage.getHint(): String; constref; begin end;
procedure TImage.setHint(const Value: String); constref; begin end;
function TImage.getShowHint(): Boolean; constref; begin end;
procedure TImage.setShowHint(const Value: Boolean); constref; begin end;
function TImage.getOnMouseEnter(): TNotifyEvent; constref; begin end;
procedure TImage.setOnMouseEnter(const Value: TNotifyEvent); constref; begin end;
function TImage.getOnMouseLeave(): TNotifyEvent; constref; begin end;
procedure TImage.setOnMouseLeave(const Value: TNotifyEvent); constref; begin end;
function TImage.getOnMouseMove(): TMouseMoveEvent; constref; begin end;
procedure TImage.setOnMouseMove(const Value: TMouseMoveEvent); constref; begin end;
type TCustomPanel = type TCustomControl;
function TCustomPanel.getAlignment(): TAlignment; constref; begin end;
procedure TCustomPanel.setAlignment(const Value: TAlignment); constref; begin end;
function TCustomPanel.getBevelInner(): TPanelBevel; constref; begin end;
procedure TCustomPanel.setBevelInner(const Value: TPanelBevel); constref; begin end;
function TCustomPanel.getBevelOuter(): TPanelBevel; constref; begin end;
procedure TCustomPanel.setBevelOuter(const Value: TPanelBevel); constref; begin end;
function TCustomPanel.getBevelWidth(): TBevelWidth; constref; begin end;
procedure TCustomPanel.setBevelWidth(const Value: TBevelWidth); constref; begin end;
function TCustomPanel.getFullRepaint(): Boolean; constref; begin end;
procedure TCustomPanel.setFullRepaint(const Value: Boolean); constref; begin end;
procedure TCustomPanel.Init(TheOwner: TComponent); begin end;
procedure TCustomPanel.Free(); constref; begin end;
type TPanel = type TCustomPanel;
procedure TPanel.Init(TheOwner: TComponent); begin end;
procedure TPanel.Free(); constref; begin end;
type TShape = type TGraphicControl;
procedure TShape.StyleChanged(Sender: TObject); constref; begin end;
function TShape.getBrush(): TBrush; constref; begin end;
procedure TShape.setBrush(const Value: TBrush); constref; begin end;
function TShape.getPen(): TPen; constref; begin end;
procedure TShape.setPen(const Value: TPen); constref; begin end;
function TShape.getShape(): TShapeType; constref; begin end;
procedure TShape.setShape(const Value: TShapeType); constref; begin end;
procedure TShape.Init(TheOwner: TComponent); begin end;
procedure TShape.Free(); constref; begin end;
type TProgressBarOrientation = (pbHorizontal, pbVertical, pbRightToLeft, pbTopDown);
type TProgressBarStyle = (pbstNormal, pbstMarquee);
type TTrackBarOrientation = (trHorizontal, trVertical);
type TTickMark = (tmBottomRight, tmTopLeft, tmBoth);
type TTickStyle = (tsNone, tsAuto, tsManual);
type TTrackBarScalePos = (trLeft, trRight, trTop, trBottom);
type _TCheckListClicked = procedure(Sender: TObject; Index: integer);
type _TTabChangingEvent = procedure(Sender: TObject; var AllowChange: Boolean);
type TTabStyle = (tsTabs, tsButtons, tsFlatButtons);
type TTabPosition = (tpTop, tpBottom, tpLeft, tpRight);
type TCTabControlOption = (nboShowCloseButtons, nboMultiLine, nboHidePageListPopup, nboKeyboardTabSwitch, nboShowAddTabButton);
type TCTabControlOptions = set of TCTabControlOption;
type TPanelPart = (ppText, ppBorder, ppWidth);
type TPanelParts = set of TPanelPart;
type TStatusPanelStyle = (psText, psOwnerDraw);
type TStatusPanelBevel = (pbNone, pbLowered, pbRaised);
type TCustomProgressBar = type TWinControl;
procedure TCustomProgressBar.Init(AOwner: TComponent); begin end;
procedure TCustomProgressBar.StepIt(); constref; begin end;
procedure TCustomProgressBar.StepBy(Delta: Integer); constref; begin end;
function TCustomProgressBar.getMax(): Integer; constref; begin end;
procedure TCustomProgressBar.setMax(const Value: Integer); constref; begin end;
function TCustomProgressBar.getMin(): Integer; constref; begin end;
procedure TCustomProgressBar.setMin(const Value: Integer); constref; begin end;
function TCustomProgressBar.getOrientation(): TProgressBarOrientation; constref; begin end;
procedure TCustomProgressBar.setOrientation(const Value: TProgressBarOrientation); constref; begin end;
function TCustomProgressBar.getPosition(): Integer; constref; begin end;
procedure TCustomProgressBar.setPosition(const Value: Integer); constref; begin end;
function TCustomProgressBar.getSmooth(): boolean; constref; begin end;
procedure TCustomProgressBar.setSmooth(const Value: boolean); constref; begin end;
function TCustomProgressBar.getStep(): Integer; constref; begin end;
procedure TCustomProgressBar.setStep(const Value: Integer); constref; begin end;
function TCustomProgressBar.getStyle(): TProgressBarStyle; constref; begin end;
procedure TCustomProgressBar.setStyle(const Value: TProgressBarStyle); constref; begin end;
function TCustomProgressBar.getBarShowText(): boolean; constref; begin end;
procedure TCustomProgressBar.setBarShowText(const Value: boolean); constref; begin end;
procedure TCustomProgressBar.Free(); constref; begin end;
type TProgressBar = type TCustomProgressBar;
procedure TProgressBar.Init(AOwner: TComponent); begin end;
procedure TProgressBar.Free(); constref; begin end;
type TCustomTrackBar = type TWinControl;
procedure TCustomTrackBar.Init(AOwner: TComponent); begin end;
procedure TCustomTrackBar.SetTick(Value: Integer); constref; begin end;
function TCustomTrackBar.getFrequency(): Integer; constref; begin end;
procedure TCustomTrackBar.setFrequency(const Value: Integer); constref; begin end;
function TCustomTrackBar.getLineSize(): Integer; constref; begin end;
procedure TCustomTrackBar.setLineSize(const Value: Integer); constref; begin end;
function TCustomTrackBar.getMax(): Integer; constref; begin end;
procedure TCustomTrackBar.setMax(const Value: Integer); constref; begin end;
function TCustomTrackBar.getMin(): Integer; constref; begin end;
procedure TCustomTrackBar.setMin(const Value: Integer); constref; begin end;
function TCustomTrackBar.getOnChange(): TNotifyEvent; constref; begin end;
procedure TCustomTrackBar.setOnChange(const Value: TNotifyEvent); constref; begin end;
function TCustomTrackBar.getOrientation(): TTrackBarOrientation; constref; begin end;
procedure TCustomTrackBar.setOrientation(const Value: TTrackBarOrientation); constref; begin end;
function TCustomTrackBar.getPageSize(): Integer; constref; begin end;
procedure TCustomTrackBar.setPageSize(const Value: Integer); constref; begin end;
function TCustomTrackBar.getPosition(): Integer; constref; begin end;
procedure TCustomTrackBar.setPosition(const Value: Integer); constref; begin end;
function TCustomTrackBar.getReversed(): Boolean; constref; begin end;
procedure TCustomTrackBar.setReversed(const Value: Boolean); constref; begin end;
function TCustomTrackBar.getScalePos(): TTrackBarScalePos; constref; begin end;
procedure TCustomTrackBar.setScalePos(const Value: TTrackBarScalePos); constref; begin end;
function TCustomTrackBar.getSelEnd(): Integer; constref; begin end;
procedure TCustomTrackBar.setSelEnd(const Value: Integer); constref; begin end;
function TCustomTrackBar.getSelStart(): Integer; constref; begin end;
procedure TCustomTrackBar.setSelStart(const Value: Integer); constref; begin end;
function TCustomTrackBar.getShowSelRange(): Boolean; constref; begin end;
procedure TCustomTrackBar.setShowSelRange(const Value: Boolean); constref; begin end;
function TCustomTrackBar.getTickMarks(): TTickMark; constref; begin end;
procedure TCustomTrackBar.setTickMarks(const Value: TTickMark); constref; begin end;
function TCustomTrackBar.getTickStyle(): TTickStyle; constref; begin end;
procedure TCustomTrackBar.setTickStyle(const Value: TTickStyle); constref; begin end;
procedure TCustomTrackBar.Free(); constref; begin end;
type TTrackBar = type TCustomTrackBar;
procedure TTrackBar.Init(AOwner: TComponent); begin end;
procedure TTrackBar.Free(); constref; begin end;
type TCustomCheckListBox = type TCustomListBox;
procedure TCustomCheckListBox.Toggle(AIndex: Integer); constref; begin end;
procedure TCustomCheckListBox.CheckAll(AState: TCheckBoxState; aAllowGrayed: Boolean = True; aAllowDisabled: Boolean = True); constref; begin end;
function TCustomCheckListBox.getAllowGrayed(): Boolean; constref; begin end;
procedure TCustomCheckListBox.setAllowGrayed(const Value: Boolean); constref; begin end;
function TCustomCheckListBox.getChecked(const Index: UInt32): Boolean; constref; begin end;
procedure TCustomCheckListBox.setChecked(const Index: UInt32; const Value: Boolean); constref; begin end;
function TCustomCheckListBox.getItemEnabled(const Index: UInt32): Boolean; constref; begin end;
procedure TCustomCheckListBox.setItemEnabled(const Index: UInt32; const Value: Boolean); constref; begin end;
function TCustomCheckListBox.getState(const Index: UInt32): TCheckBoxState; constref; begin end;
procedure TCustomCheckListBox.setState(const Index: UInt32; const Value: TCheckBoxState); constref; begin end;
function TCustomCheckListBox.getCount(): integer; constref; begin end;
function TCustomCheckListBox.getOnClickCheck(): TNotifyEvent; constref; begin end;
procedure TCustomCheckListBox.setOnClickCheck(const Value: TNotifyEvent); constref; begin end;
procedure TCustomCheckListBox.setOnItemClick(const Value: TCheckListClicked); constref; begin end;
procedure TCustomCheckListBox.Init(AOwner: TComponent); begin end;
procedure TCustomCheckListBox.Free(); constref; begin end;
type TCheckListBox = type TCustomCheckListBox;
procedure TCheckListBox.Init(AOwner: TComponent); begin end;
procedure TCheckListBox.Free(); constref; begin end;
type TCustomPage = type TWinControl;
procedure TCustomPage.Init(TheOwner: TComponent); begin end;
function TCustomPage.CanTab(): boolean; constref; begin end;
function TCustomPage.IsControlVisible(): Boolean; constref; begin end;
function TCustomPage.HandleObjectShouldBeVisible(): boolean; constref; begin end;
function TCustomPage.VisibleIndex(): integer; constref; begin end;
function TCustomPage.getPageIndex(): Integer; constref; begin end;
procedure TCustomPage.setPageIndex(const Value: Integer); constref; begin end;
function TCustomPage.getTabVisible(): Boolean; constref; begin end;
procedure TCustomPage.setTabVisible(const Value: Boolean); constref; begin end;
function TCustomPage.getOnHide(): TNotifyEvent; constref; begin end;
procedure TCustomPage.setOnHide(const Value: TNotifyEvent); constref; begin end;
function TCustomPage.getOnShow(): TNotifyEvent; constref; begin end;
procedure TCustomPage.setOnShow(const Value: TNotifyEvent); constref; begin end;
procedure TCustomPage.Free(); constref; begin end;
type TCustomTabControl = type TWinControl;
function TCustomTabControl.TabRect(AIndex: Integer): TRect; constref; begin end;
function TCustomTabControl.GetImageIndex(ThePageIndex: Integer): Integer; constref; begin end;
function TCustomTabControl.IndexOf(APage: TPersistent): integer; constref; begin end;
function TCustomTabControl.CustomPage(Index: integer): TCustomPage; constref; begin end;
function TCustomTabControl.CanChangePageIndex(): boolean; constref; begin end;
function TCustomTabControl.GetMinimumTabWidth(): integer; constref; begin end;
function TCustomTabControl.GetMinimumTabHeight(): integer; constref; begin end;
function TCustomTabControl.TabToPageIndex(AIndex: integer): integer; constref; begin end;
function TCustomTabControl.PageToTabIndex(AIndex: integer): integer; constref; begin end;
procedure TCustomTabControl.DoCloseTabClicked(APage: TCustomPage); constref; begin end;
function TCustomTabControl.getMultiLine(): Boolean; constref; begin end;
procedure TCustomTabControl.setMultiLine(const Value: Boolean); constref; begin end;
function TCustomTabControl.getOnChanging(): TTabChangingEvent; constref; begin end;
procedure TCustomTabControl.setOnChanging(const Value: TTabChangingEvent); constref; begin end;
function TCustomTabControl.getOptions(): TCTabControlOptions; constref; begin end;
procedure TCustomTabControl.setOptions(const Value: TCTabControlOptions); constref; begin end;
function TCustomTabControl.getPage(): TCustomPage; constref; begin end;
function TCustomTabControl.getPageCount(): integer; constref; begin end;
function TCustomTabControl.getPageIndex(): Integer; constref; begin end;
procedure TCustomTabControl.setPageIndex(const Value: Integer); constref; begin end;
function TCustomTabControl.getPages(): TStrings; constref; begin end;
procedure TCustomTabControl.setPages(const Value: TStrings); constref; begin end;
function TCustomTabControl.getShowTabs(): Boolean; constref; begin end;
procedure TCustomTabControl.setShowTabs(const Value: Boolean); constref; begin end;
function TCustomTabControl.getTabPosition(): TTabPosition; constref; begin end;
procedure TCustomTabControl.setTabPosition(const Value: TTabPosition); constref; begin end;
procedure TCustomTabControl.Init(TheOwner: TComponent); begin end;
procedure TCustomTabControl.Free(); constref; begin end;
type TTabSheet = type TCustomPage;
function TTabSheet.getTabIndex(): Integer; constref; begin end;
procedure TTabSheet.Init(TheOwner: TComponent); begin end;
procedure TTabSheet.Free(); constref; begin end;
type TPageControl = type TCustomTabControl;
procedure TPageControl.SelectNextPage(GoForward: Boolean; CheckTabVisible: Boolean); constref; begin end;
function TPageControl.AddTabSheet(): TTabSheet; constref; begin end;
function TPageControl.getPages(): Integer; constref; begin end;
function TPageControl.getActivePage(): TTabSheet; constref; begin end;
procedure TPageControl.setActivePage(const Value: TTabSheet); constref; begin end;
procedure TPageControl.Init(TheOwner: TComponent); begin end;
procedure TPageControl.Free(); constref; begin end;
type TStatusBar = type TWinControl;
type TStatusPanel = type TCollectionItem;
function TStatusPanel.StatusBar(): TStatusBar; constref; begin end;
function TStatusPanel.getAlignment(): TAlignment; constref; begin end;
procedure TStatusPanel.setAlignment(const Value: TAlignment); constref; begin end;
function TStatusPanel.getBevel(): TStatusPanelBevel; constref; begin end;
procedure TStatusPanel.setBevel(const Value: TStatusPanelBevel); constref; begin end;
function TStatusPanel.getStyle(): TStatusPanelStyle; constref; begin end;
procedure TStatusPanel.setStyle(const Value: TStatusPanelStyle); constref; begin end;
function TStatusPanel.getText(): TCaption; constref; begin end;
procedure TStatusPanel.setText(const Value: TCaption); constref; begin end;
function TStatusPanel.getWidth(): Integer; constref; begin end;
procedure TStatusPanel.setWidth(const Value: Integer); constref; begin end;
procedure TStatusPanel.Init(ACollection: TCollection); begin end;
procedure TStatusPanel.Free(); constref; begin end;
type TStatusPanels = type TCollection;
procedure TStatusPanels.Init(AStatusBar: TStatusBar); begin end;
function TStatusPanels.Add(): TStatusPanel; constref; begin end;
function TStatusPanels.getItems(const Index: UInt32): TStatusPanel; constref; begin end;
procedure TStatusPanels.setItems(const Index: UInt32; const Value: TStatusPanel); constref; begin end;
function TStatusPanels.getStatusBar(): TStatusBar; constref; begin end;
procedure TStatusPanels.Free(); constref; begin end;
procedure TStatusBar.InvalidatePanel(PanelIndex: integer; PanelParts: TPanelParts); constref; begin end;
procedure TStatusBar.BeginUpdate(); constref; begin end;
procedure TStatusBar.EndUpdate(); constref; begin end;
function TStatusBar.GetPanelIndexAt(X, Y: Integer): Integer; constref; begin end;
function TStatusBar.SizeGripEnabled(): Boolean; constref; begin end;
function TStatusBar.UpdatingStatusBar(): boolean; constref; begin end;
function TStatusBar.getCanvas(): TCanvas; constref; begin end;
function TStatusBar.getAutoHint(): Boolean; constref; begin end;
procedure TStatusBar.setAutoHint(const Value: Boolean); constref; begin end;
function TStatusBar.getPanels(): TStatusPanels; constref; begin end;
procedure TStatusBar.setPanels(const Value: TStatusPanels); constref; begin end;
function TStatusBar.getSimpleText(): TCaption; constref; begin end;
procedure TStatusBar.setSimpleText(const Value: TCaption); constref; begin end;
function TStatusBar.getSimplePanel(): Boolean; constref; begin end;
procedure TStatusBar.setSimplePanel(const Value: Boolean); constref; begin end;
function TStatusBar.getSizeGrip(): Boolean; constref; begin end;
procedure TStatusBar.setSizeGrip(const Value: Boolean); constref; begin end;
function TStatusBar.getOnHint(): TNotifyEvent; constref; begin end;
procedure TStatusBar.setOnHint(const Value: TNotifyEvent); constref; begin end;
procedure TStatusBar.Init(TheOwner: TComponent); begin end;
procedure TStatusBar.Free(); constref; begin end;
type TOpenOption = (ofReadOnly, ofOverwritePrompt,ofHideReadOnly,ofNoChangeDir,ofShowHelp,ofNoValidate,ofAllowMultiSelect,ofExtensionDifferent,ofPathMustExist,ofFileMustExist,ofCreatePrompt,ofShareAware,ofNoReadOnlyReturn,ofNoTestFileCreate,ofNoNetworkButton,ofNoLongNames,ofOldStyleDialog,ofNoDereferenceLinks,ofEnableIncludeNotify,ofEnableSizing,ofDontAddToRecent,ofForceShowHidden,ofViewDetail,ofAutoPreview);
type TOpenOptions = set of TOpenOption;
type TLCLComponent = type TComponent;
procedure TLCLComponent.RemoveAllHandlersOfObject(AnObject: TObject); constref; begin end;
procedure TLCLComponent.IncLCLRefCount(); constref; begin end;
procedure TLCLComponent.DecLCLRefCount(); constref; begin end;
function TLCLComponent.getLCLRefCount(): integer; constref; begin end;
procedure TLCLComponent.Init(TheOwner: TComponent); begin end;
procedure TLCLComponent.Free(); constref; begin end;
type TCommonDialog = type TLCLComponent;
function TCommonDialog.getFCompStyle(): LongInt; constref; begin end;
procedure TCommonDialog.setFCompStyle(const Value: LongInt); constref; begin end;
function TCommonDialog.Execute(): boolean; constref; begin end;
function TCommonDialog.getHandle(): THandle; constref; begin end;
procedure TCommonDialog.setHandle(const Value: THandle); constref; begin end;
function TCommonDialog.getUserChoice(): integer; constref; begin end;
procedure TCommonDialog.setUserChoice(const Value: integer); constref; begin end;
procedure TCommonDialog.Close(); constref; begin end;
procedure TCommonDialog.DoShow(); constref; begin end;
procedure TCommonDialog.DoCanClose(var CanClose: Boolean); constref; begin end;
procedure TCommonDialog.DoClose(); constref; begin end;
function TCommonDialog.HandleAllocated(): boolean; constref; begin end;
function TCommonDialog.getOnClose(): TNotifyEvent; constref; begin end;
procedure TCommonDialog.setOnClose(const Value: TNotifyEvent); constref; begin end;
function TCommonDialog.getOnCanClose(): TCloseQueryEvent; constref; begin end;
procedure TCommonDialog.setOnCanClose(const Value: TCloseQueryEvent); constref; begin end;
function TCommonDialog.getOnShow(): TNotifyEvent; constref; begin end;
procedure TCommonDialog.setOnShow(const Value: TNotifyEvent); constref; begin end;
function TCommonDialog.getWidth(): integer; constref; begin end;
procedure TCommonDialog.setWidth(const Value: integer); constref; begin end;
function TCommonDialog.getHeight(): integer; constref; begin end;
procedure TCommonDialog.setHeight(const Value: integer); constref; begin end;
procedure TCommonDialog.Init(AOwner: TComponent); begin end;
procedure TCommonDialog.Free(); constref; begin end;
type TFileDialog = type TCommonDialog;
procedure TFileDialog.DoTypeChange(); constref; begin end;
function TFileDialog.Execute(): boolean; constref; begin end;
function TFileDialog.getFiles(): TStrings; constref; begin end;
function TFileDialog.getHistoryList(): TStrings; constref; begin end;
procedure TFileDialog.setHistoryList(const Value: TStrings); constref; begin end;
procedure TFileDialog.IntfFileTypeChanged(NewFilterIndex: Integer); constref; begin end;
function TFileDialog.getDefaultExt(): string; constref; begin end;
procedure TFileDialog.setDefaultExt(const Value: string); constref; begin end;
function TFileDialog.getFileName(): String; constref; begin end;
procedure TFileDialog.setFileName(const Value: String); constref; begin end;
function TFileDialog.getFilter(): String; constref; begin end;
procedure TFileDialog.setFilter(const Value: String); constref; begin end;
function TFileDialog.getFilterIndex(): Integer; constref; begin end;
procedure TFileDialog.setFilterIndex(const Value: Integer); constref; begin end;
function TFileDialog.getInitialDir(): string; constref; begin end;
procedure TFileDialog.setInitialDir(const Value: string); constref; begin end;
function TFileDialog.getOnHelpClicked(): TNotifyEvent; constref; begin end;
procedure TFileDialog.setOnHelpClicked(const Value: TNotifyEvent); constref; begin end;
function TFileDialog.getOnTypeChange(): TNotifyEvent; constref; begin end;
procedure TFileDialog.setOnTypeChange(const Value: TNotifyEvent); constref; begin end;
procedure TFileDialog.Init(AOwner: TComponent); begin end;
procedure TFileDialog.Free(); constref; begin end;
type TOpenDialog = type TFileDialog;
procedure TOpenDialog.DoFolderChange(); constref; begin end;
procedure TOpenDialog.DoSelectionChange(); constref; begin end;
function TOpenDialog.getOptions(): TOpenOptions; constref; begin end;
procedure TOpenDialog.setOptions(const Value: TOpenOptions); constref; begin end;
function TOpenDialog.getOnFolderChange(): TNotifyEvent; constref; begin end;
procedure TOpenDialog.setOnFolderChange(const Value: TNotifyEvent); constref; begin end;
function TOpenDialog.getOnSelectionChange(): TNotifyEvent; constref; begin end;
procedure TOpenDialog.setOnSelectionChange(const Value: TNotifyEvent); constref; begin end;
procedure TOpenDialog.Init(TheOwner: TComponent); begin end;
procedure TOpenDialog.Free(); constref; begin end;
type TColorDialog = type TCommonDialog;
function TColorDialog.getColor(): TColor; constref; begin end;
procedure TColorDialog.setColor(const Value: TColor); constref; begin end;
function TColorDialog.getCustomColors(): TStrings; constref; begin end;
procedure TColorDialog.setCustomColors(const Value: TStrings); constref; begin end;
procedure TColorDialog.Init(TheOwner: TComponent); begin end;
procedure TColorDialog.Free(); constref; begin end;
type TMenu = type TLCLComponent;
type TMenuItem = type TLCLComponent;
function TMenuItem.getFCompStyle(): LongInt; constref; begin end;
procedure TMenuItem.setFCompStyle(const Value: LongInt); constref; begin end;
function TMenuItem.Find(const ACaption: string): TMenuItem; constref; begin end;
function TMenuItem.GetParentMenu(): TMenu; constref; begin end;
function TMenuItem.GetIsRightToLeft(): Boolean; constref; begin end;
function TMenuItem.HandleAllocated(): Boolean; constref; begin end;
function TMenuItem.HasIcon(): boolean; constref; begin end;
procedure TMenuItem.InitiateAction(); constref; begin end;
procedure TMenuItem.IntfDoSelect(); constref; begin end;
function TMenuItem.IndexOf(Item: TMenuItem): Integer; constref; begin end;
function TMenuItem.IndexOfCaption(const ACaption: string): Integer; constref; begin end;
function TMenuItem.VisibleIndexOf(Item: TMenuItem): Integer; constref; begin end;
procedure TMenuItem.Add(Item: TMenuItem); constref; begin end;
procedure TMenuItem.AddEx(Items: array of TMenuItem); constref; begin end;
procedure TMenuItem.AddSeparator(); constref; begin end;
procedure TMenuItem.Click(); constref; begin end;
procedure TMenuItem.Delete(Index: Integer); constref; begin end;
procedure TMenuItem.HandleNeeded(); constref; begin end;
procedure TMenuItem.Insert(Index: Integer; Item: TMenuItem); constref; begin end;
procedure TMenuItem.RecreateHandle(); constref; begin end;
procedure TMenuItem.Remove(Item: TMenuItem); constref; begin end;
function TMenuItem.IsCheckItem(): boolean; constref; begin end;
function TMenuItem.IsLine(): Boolean; constref; begin end;
function TMenuItem.IsInMenuBar(): boolean; constref; begin end;
procedure TMenuItem.Clear(); constref; begin end;
function TMenuItem.HasBitmap(): boolean; constref; begin end;
function TMenuItem.GetIconSize(): TPoint; constref; begin end;
function TMenuItem.AddMenu(s: string): TMenuItem; constref; begin end;
function TMenuItem.getCount(): Integer; constref; begin end;
function TMenuItem.getItems(): TMenuItem; constref; begin end;
function TMenuItem.getHint(): String; constref; begin end;
procedure TMenuItem.setHint(const Value: String); constref; begin end;
function TMenuItem.getChecked(): Boolean; constref; begin end;
procedure TMenuItem.setChecked(const Value: Boolean); constref; begin end;
function TMenuItem.getMenuIndex(): Integer; constref; begin end;
procedure TMenuItem.setMenuIndex(const Value: Integer); constref; begin end;
function TMenuItem.getMenu(): TMenu; constref; begin end;
function TMenuItem.getParent(): TMenuItem; constref; begin end;
function TMenuItem.getCommand(): Word; constref; begin end;
function TMenuItem.getAutoCheck(): boolean; constref; begin end;
procedure TMenuItem.setAutoCheck(const Value: boolean); constref; begin end;
function TMenuItem.getDefault(): Boolean; constref; begin end;
procedure TMenuItem.setDefault(const Value: Boolean); constref; begin end;
function TMenuItem.getBitmap(): TBitmap; constref; begin end;
procedure TMenuItem.setBitmap(const Value: TBitmap); constref; begin end;
function TMenuItem.getGroupIndex(): Byte; constref; begin end;
procedure TMenuItem.setGroupIndex(const Value: Byte); constref; begin end;
function TMenuItem.getRadioItem(): Boolean; constref; begin end;
procedure TMenuItem.setRadioItem(const Value: Boolean); constref; begin end;
function TMenuItem.getRightJustify(): boolean; constref; begin end;
procedure TMenuItem.setRightJustify(const Value: boolean); constref; begin end;
function TMenuItem.getOnClick(): TNotifyEvent; constref; begin end;
procedure TMenuItem.setOnClick(const Value: TNotifyEvent); constref; begin end;
function TMenuItem.getCaption(): String; constref; begin end;
procedure TMenuItem.setCaption(const Value: String); constref; begin end;
procedure TMenuItem.Init(AOwner: TComponent); begin end;
procedure TMenuItem.Free(); constref; begin end;
function TMenu.getFCompStyle(): LongInt; constref; begin end;
procedure TMenu.setFCompStyle(const Value: LongInt); constref; begin end;
procedure TMenu.DestroyHandle(); constref; begin end;
function TMenu.HandleAllocated(): Boolean; constref; begin end;
function TMenu.IsRightToLeft(): Boolean; constref; begin end;
function TMenu.UseRightToLeftAlignment(): Boolean; constref; begin end;
function TMenu.UseRightToLeftReading(): Boolean; constref; begin end;
procedure TMenu.HandleNeeded(); constref; begin end;
function TMenu.DispatchCommand(ACommand: Word): Boolean; constref; begin end;
function TMenu.AddMenu(name: string): TMenuItem; constref; begin end;
function TMenu.getParent(): TComponent; constref; begin end;
procedure TMenu.setParent(const Value: TComponent); constref; begin end;
function TMenu.getShortcutHandled(): boolean; constref; begin end;
procedure TMenu.setShortcutHandled(const Value: boolean); constref; begin end;
function TMenu.getItems(): TMenuItem; constref; begin end;
procedure TMenu.Init(AOwner: TComponent); begin end;
procedure TMenu.Free(); constref; begin end;
type TMainMenu = type TMenu;
procedure TMainMenu.Init(AOwner: TComponent); begin end;
procedure TMainMenu.Free(); constref; begin end;
type TCustomFloatSpinEdit = type TCustomEdit;
function TCustomFloatSpinEdit.GetLimitedValue(const AValue: Double): Double; constref; begin end;
function TCustomFloatSpinEdit.ValueToStr(const AValue: Double): String; constref; begin end;
function TCustomFloatSpinEdit.StrToValue(const S: String): Double; constref; begin end;
function TCustomFloatSpinEdit.getDecimalPlaces(): Integer; constref; begin end;
procedure TCustomFloatSpinEdit.setDecimalPlaces(const Value: Integer); constref; begin end;
function TCustomFloatSpinEdit.getIncrement(): Double; constref; begin end;
procedure TCustomFloatSpinEdit.setIncrement(const Value: Double); constref; begin end;
function TCustomFloatSpinEdit.getMinValue(): Double; constref; begin end;
procedure TCustomFloatSpinEdit.setMinValue(const Value: Double); constref; begin end;
function TCustomFloatSpinEdit.getMaxValue(): Double; constref; begin end;
procedure TCustomFloatSpinEdit.setMaxValue(const Value: Double); constref; begin end;
function TCustomFloatSpinEdit.getValue(): Double; constref; begin end;
procedure TCustomFloatSpinEdit.setValue(const Value: Double); constref; begin end;
function TCustomFloatSpinEdit.getValueEmpty(): Boolean; constref; begin end;
procedure TCustomFloatSpinEdit.setValueEmpty(const Value: Boolean); constref; begin end;
procedure TCustomFloatSpinEdit.Init(TheOwner: TComponent); begin end;
procedure TCustomFloatSpinEdit.Free(); constref; begin end;
type TFloatSpinEdit = type TCustomFloatSpinEdit;
procedure TFloatSpinEdit.Init(TheOwner: TComponent); begin end;
procedure TFloatSpinEdit.Free(); constref; begin end;
type TCustomSpinEdit = type TCustomFloatSpinEdit;
function TCustomSpinEdit.getValue(): integer; constref; begin end;
procedure TCustomSpinEdit.setValue(const Value: integer); constref; begin end;
function TCustomSpinEdit.getMinValue(): integer; constref; begin end;
procedure TCustomSpinEdit.setMinValue(const Value: integer); constref; begin end;
function TCustomSpinEdit.getMaxValue(): integer; constref; begin end;
procedure TCustomSpinEdit.setMaxValue(const Value: integer); constref; begin end;
function TCustomSpinEdit.getIncrement(): integer; constref; begin end;
procedure TCustomSpinEdit.setIncrement(const Value: integer); constref; begin end;
procedure TCustomSpinEdit.Init(TheOwner: TComponent); begin end;
procedure TCustomSpinEdit.Free(); constref; begin end;
type TSpinEdit = type TCustomSpinEdit;
procedure TSpinEdit.Init(TheOwner: TComponent); begin end;
procedure TSpinEdit.Free(); constref; begin end;
type TProcessOption = (poRunSuspended,poWaitOnExit, poUsePipes,poStderrToOutPut, poNoConsole,poNewConsole, poDefaultErrorMode,poNewProcessGroup, poDebugProcess,poDebugOnlyThisProcess);
type TShowWindowOptions = (swoNone,swoHIDE,swoMaximize,swoMinimize,swoRestore,swoShow, swoShowDefault,swoShowMaximized,swoShowMinimized, swoshowMinNOActive,swoShowNA,swoShowNoActivate,swoShowNormal);
type TStartupOption = (suoUseShowWindow,suoUseSize,suoUsePosition, suoUseCountChars,suoUseFillAttribute);
type TProcessPriority = (ppHigh,ppIdle,ppNormal,ppRealTime);
type TProcessOptions = set of TProcessOption;
type TStartupOptions = set of TStartupOption;
type TInputPipeStream = type THandleStream;
function TInputPipeStream.Write(constref Buffer; Count : Longint): Longint; constref; begin end;
function TInputPipeStream.Seek(const Offset: int64; Origin: TSeekOrigin): int64; constref; begin end;
function TInputPipeStream.Read(var Buffer; Count : Longint): longint; constref; begin end;
function TInputPipeStream.getNumBytesAvailable(): DWord; constref; begin end;
procedure TInputPipeStream.Init(AHandle: THandle); begin end;
procedure TInputPipeStream.Free(); constref; begin end;
type TOutputPipeStream = type THandleStream;
function TOutputPipeStream.Seek(const Offset: int64; Origin: TSeekOrigin): int64; constref; begin end;
function TOutputPipeStream.Read(Var Buffer; Count : Longint): longint; constref; begin end;
procedure TOutputPipeStream.Init(AHandle: THandle); begin end;
procedure TOutputPipeStream.Free(); constref; begin end;
type TProcess = type TComponent;
procedure TProcess.Execute(); constref; begin end;
procedure TProcess.CloseInput(); constref; begin end;
procedure TProcess.CloseOutput(); constref; begin end;
procedure TProcess.CloseStderr(); constref; begin end;
function TProcess.Resume(): Integer; constref; begin end;
function TProcess.Suspend(): Integer; constref; begin end;
function TProcess.Terminate(AExitCode : Integer): Boolean; constref; begin end;
function TProcess.WaitOnExit(): Boolean; constref; begin end;
function TProcess.getWindowRect(): TRect; constref; begin end;
procedure TProcess.setWindowRect(const Value: TRect); constref; begin end;
function TProcess.getHandle(): THandle; constref; begin end;
function TProcess.getProcessHandle(): THandle; constref; begin end;
function TProcess.getThreadHandle(): THandle; constref; begin end;
function TProcess.getProcessID(): Integer; constref; begin end;
function TProcess.getThreadID(): Integer; constref; begin end;
function TProcess.getInput(): TOutputPipeStream; constref; begin end;
function TProcess.getOutput(): TInputPipeStream; constref; begin end;
function TProcess.getStderr(): TinputPipeStream; constref; begin end;
function TProcess.getExitStatus(): Integer; constref; begin end;
function TProcess.getInheritHandles(): Boolean; constref; begin end;
procedure TProcess.setInheritHandles(const Value: Boolean); constref; begin end;
function TProcess.getPipeBufferSize(): cardinal; constref; begin end;
procedure TProcess.setPipeBufferSize(const Value: cardinal); constref; begin end;
function TProcess.getActive(): Boolean; constref; begin end;
procedure TProcess.setActive(const Value: Boolean); constref; begin end;
function TProcess.getApplicationName(): String; constref; begin end;
procedure TProcess.setApplicationName(const Value: String); constref; begin end;
function TProcess.getCommandLine(): String; constref; begin end;
procedure TProcess.setCommandLine(const Value: String); constref; begin end;
function TProcess.getExecutable(): String; constref; begin end;
procedure TProcess.setExecutable(const Value: String); constref; begin end;
function TProcess.getParameters(): TStrings; constref; begin end;
procedure TProcess.setParameters(const Value: TStrings); constref; begin end;
function TProcess.getConsoleTitle(): String; constref; begin end;
procedure TProcess.setConsoleTitle(const Value: String); constref; begin end;
function TProcess.getCurrentDirectory(): String; constref; begin end;
procedure TProcess.setCurrentDirectory(const Value: String); constref; begin end;
function TProcess.getDesktop(): String; constref; begin end;
procedure TProcess.setDesktop(const Value: String); constref; begin end;
function TProcess.getEnvironment(): TStrings; constref; begin end;
procedure TProcess.setEnvironment(const Value: TStrings); constref; begin end;
function TProcess.getOptions(): TProcessOptions; constref; begin end;
procedure TProcess.setOptions(const Value: TProcessOptions); constref; begin end;
function TProcess.getPriority(): TProcessPriority; constref; begin end;
procedure TProcess.setPriority(const Value: TProcessPriority); constref; begin end;
function TProcess.getStartupOptions(): TStartupOptions; constref; begin end;
procedure TProcess.setStartupOptions(const Value: TStartupOptions); constref; begin end;
function TProcess.getRunning(): Boolean; constref; begin end;
function TProcess.getShowWindow(): TShowWindowOptions; constref; begin end;
procedure TProcess.setShowWindow(const Value: TShowWindowOptions); constref; begin end;
function TProcess.getWindowColumns(): Cardinal; constref; begin end;
procedure TProcess.setWindowColumns(const Value: Cardinal); constref; begin end;
function TProcess.getWindowHeight(): Cardinal; constref; begin end;
procedure TProcess.setWindowHeight(const Value: Cardinal); constref; begin end;
function TProcess.getWindowLeft(): Cardinal; constref; begin end;
procedure TProcess.setWindowLeft(const Value: Cardinal); constref; begin end;
function TProcess.getWindowRows(): Cardinal; constref; begin end;
procedure TProcess.setWindowRows(const Value: Cardinal); constref; begin end;
function TProcess.getWindowTop(): Cardinal; constref; begin end;
procedure TProcess.setWindowTop(const Value: Cardinal); constref; begin end;
function TProcess.getWindowWidth(): Cardinal; constref; begin end;
procedure TProcess.setWindowWidth(const Value: Cardinal); constref; begin end;
function TProcess.getFillAttribute(): Cardinal; constref; begin end;
procedure TProcess.setFillAttribute(const Value: Cardinal); constref; begin end;
function TProcess.getXTermProgram(): String; constref; begin end;
procedure TProcess.setXTermProgram(const Value: String); constref; begin end;
procedure TProcess.Init(AOwner : TComponent); begin end;
procedure TProcess.Free(); constref; begin end;
type TRegExpr = type TObject;
procedure TRegExpr.Init(); begin end;
function TRegExpr.getExpression(): String; constref; begin end;
procedure TRegExpr.setExpression(const Value: String); constref; begin end;
function TRegExpr.Exec(const AInputString :String): boolean; constref; begin end;
function TRegExpr.ExecNext(): boolean; constref; begin end;
function TRegExpr.ExecPos(AOffset: PtrInt): boolean; constref; begin end;
function TRegExpr.getInputString(): String; constref; begin end;
procedure TRegExpr.setInputString(const Value: String); constref; begin end;
function TRegExpr.Substitute(const ATemplate : String): String; constref; begin end;
procedure TRegExpr.Split(AInputStr: String; APieces: TStrings); constref; begin end;
function TRegExpr.Replace(AInputStr : String; const AReplaceStr : String; AUseSubstitution : Boolean): String; constref; begin end;
function TRegExpr.getSubExprMatchCount(): integer; constref; begin end;
function TRegExpr.getMatchPos(const Index: UInt32): PtrInt; constref; begin end;
function TRegExpr.getMatchLen(const Index: UInt32): PtrInt; constref; begin end;
function TRegExpr.getMatch(const Index: UInt32): String; constref; begin end;
procedure TRegExpr.Free(); constref; begin end;