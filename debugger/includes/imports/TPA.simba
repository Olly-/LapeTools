procedure Quicksort(var Arr: TIntegerArray); begin end;
procedure tSwap(var a, b: TPoint); begin end;
procedure tpaSwap(var a, b: TPointArray); begin end;
procedure SwapE(var a, b: Extended); begin end;
procedure RAaSTPAEx(var a: TPointArray; const w, h: Integer); begin end;
procedure RAaSTPA(var a: TPointArray; const Dist: Integer); begin end;
function NearbyPointInArrayEx(const P: TPoint; w, h: Integer; const a: TPointArray): Boolean; begin end;
function NearbyPointInArray(const P: TPoint; Dist: Integer; const a: TPointArray): Boolean; begin end;
procedure QuickTPASort(var A: TIntegerArray; var B: TPointArray; iLo, iHi: Integer; SortUp: Boolean); begin end;
procedure QuickATPASort(var A: TIntegerArray; var B: T2DPointArray; iLo, iHi: Integer; SortUp: Boolean); begin end;
procedure SortTPAByX(var a: TPointArray; const LowToHi: Boolean); begin end;
procedure SortTPAByY(var a: TPointArray; const LowToHi: Boolean); begin end;
function FindTPARows(a: TPointArray): T2DPointArray; begin end;
function FindTPAColumns(a: TPointArray): T2DPointArray; begin end;
procedure SortTPAFrom(var a: TPointArray; const From: TPoint); begin end;
procedure SortATPAFrom(var a: T2DPointArray; const From: TPoint); begin end;
procedure SortATPAFromFirstPoint(var a: T2DPointArray; const From: TPoint); begin end;
procedure SortATPAFromMidPoint(var a: T2DPointArray; const From: TPoint); begin end;
procedure SortATPAFromFirstPointX(var a: T2DPointArray; const From: TPoint); begin end;
procedure SortATPAFromFirstPointY(var a: T2DPointArray; const From: TPoint); begin end;
procedure InvertTPA(var a: TPointArray); begin end;
procedure InvertATPA(var a: T2DPointArray); begin end;
function MiddleTPAEx(const TPA: TPointArray; var x, y: Integer): Boolean; begin end;
function MiddleTPA(const tpa: TPointArray): TPoint; begin end;
procedure MedianTPAEx(var tpa: TPointArray; out x, y: integer); begin end;
function MedianTPA(var tpa: TPointArray): TPoint; begin end;
procedure SortATPASize(var a: T2DPointArray; const BigFirst: Boolean); begin end;
procedure SortATPAFromSize(var a: T2DPointArray; const Size: Integer; CloseFirst: Boolean); begin end;
procedure FilterTPAsBetween(var atpa: T2DPointArray; const minLength, maxLength: integer); begin end;
function InIntArrayEx(const a: TIntegerArray; var Where: Integer; const Number: Integer): Boolean; begin end;
function InIntArray(const a: TIntegerArray; Number: Integer): Boolean; begin end;
procedure ClearSameIntegers(var a: TIntegerArray); begin end;
procedure ClearSameIntegersAndTPA(var a: TIntegerArray; var p: TPointArray); begin end;
function SplitTPAEx(const arr: TPointArray; w, h: Integer): T2DPointArray; begin end;
function SplitTPA(const arr: TPointArray; Dist: Integer): T2DPointArray; begin end;
function ClusterTPAEx(const TPA: TPointArray; width, height: Integer): T2DPointArray; begin end;
function ClusterTPA(const TPA: TPointArray; dist: Integer): T2DPointArray; begin end;
function FloodFillTPA(const TPA: TPointArray): T2DPointArray; begin end;
procedure FilterPointsPie(var Points: TPointArray; const SD, ED, MinR, MaxR: Extended; Mx, My: Integer); begin end;
procedure FilterPointsDist(var Points: TPointArray; const MinDist, MaxDist: Extended; Mx, My: Integer); begin end;
procedure FilterPointsLine(var Points: TPointArray; Radial: Extended; Radius, MX, MY: Integer); begin end;
procedure FilterPointsBox(var points: TPointArray; x1, y1, x2, y2: integer); begin end;
procedure FilterTPADist(var TPA: TPointArray; maxDist: integer); begin end;
function GetATPABounds(const ATPA: T2DPointArray): TBox; begin end;
function GetTPABounds(const TPA: TPointArray): TBox; begin end;
function FindTPAinTPA(const SearchTPA, TotalTPA: TPointArray; var Matches: TPointArray): Boolean; begin end;
function GetSamePointsATPA(const ATPA: T2DPointArray; var Matches: TPointArray): boolean; begin end;
function FindTextTPAinTPA(Height: integer; const SearchTPA, TotalTPA: TPointArray; var Matches: TPointArray): Boolean; begin end;
procedure SortCircleWise(var tpa: TPointArray; const cx, cy, StartDegree: Integer; SortUp, ClockWise: Boolean); begin end;
procedure LinearSort(var tpa: TPointArray; cx, cy, sd: Integer; SortUp: Boolean); begin end;
function RotatePoint(Const p: TPoint; angle, mx, my: Extended): TPoint; begin end;
function ChangeDistPT(const PT: TPoint; mx,my: integer; newdist: extended): TPoint; begin end;
function ChangeDistTPA(var TPA: TPointArray; mx,my: integer; newdist: extended): boolean; begin end;
function FindGapsTPA(const TPA: TPointArray; MinPixels: Integer): T2DPointArray; begin end;
function RemoveDistTPointArray(x, y, dist: Integer; const ThePoints: TPointArray; RemoveHigher: Boolean): TPointArray; begin end;
function CombineTPA(const Ar1, Ar2: TPointArray): TPointArray; begin end;
function ReArrangeandShortenArrayEx(const a: TPointArray; w, h: Integer): TPointArray; begin end;
function ReArrangeandShortenArray(const a: TPointArray; Dist: Integer): TPointArray; begin end;
function TPAtoATPAEx(const TPA: TPointArray; w, h: Integer): T2DPointArray; begin end;
function TPAtoATPA(const TPA: TPointArray; Dist: Integer): T2DPointArray; begin end;
function CombineIntArray(const Ar1, Ar2: TIntegerArray): TIntegerArray; begin end;
function MergeATPA(const ATPA: T2DPointArray): TPointArray; begin end;
procedure AppendTPA(var TPA: TPointArray; const ToAppend: TPointArray); begin end;
function TPAFromLine(const x1, y1, x2, y2: Integer): TPointArray; begin end;
function EdgeFromBox(const Box: TBox): TPointArray; begin end;
function TPAFromBox(const Box: TBox): TPointArray; begin end;
function TPAFromEllipse(const CX, CY, XRadius, YRadius : Integer) : TPointArray; begin end;
function TPAFromCircle(const CX, CY, Radius : Integer) : TPointArray; begin end;
function TPAFromPolygon(const shape: TPointArray) : TPointArray; begin end;
procedure FillEllipse(var a: TPointArray); begin end;
function RotatePoints(Const P: TPointArray; A, cx, cy: Extended): TPointArray; begin end;
function FindTPAEdges(const p: TPointArray): TPointArray; begin end;
function ClearTPAFromTPA(const arP, ClearPoints: TPointArray): TPointArray; begin end;
function ReturnPointsNotInTPA(Const TotalTPA: TPointArray; const Box: TBox): TPointArray; begin end;
function PointInTPA(p: TPoint; const arP: TPointArray): Boolean; begin end;
procedure ClearDoubleTPA(var TPA: TPointArray); begin end;
procedure TPACountSort(Var TPA: TPointArray; const max: TPoint; Const SortOnX: Boolean); begin end;
procedure TPACountSortBase(Var TPA: TPointArray; const maxx, base: TPoint; const SortOnX: Boolean); begin end;
procedure InvertTIA(var tI: TIntegerArray); begin end;
function SumIntegerArray(const Ints: TIntegerArray): Integer; begin end;
function AverageTIA(const tI: TIntegerArray): Integer; begin end;
function AverageExtended(const tE: TExtendedArray): Extended; begin end;
procedure SplitTPAExWrap(const arr: TPointArray; w, h: Integer; var res: T2DPointArray); begin end;
procedure SplitTPAWrap(const arr: TPointArray; Dist: Integer; var res: T2DPointArray); begin end;
procedure FindGapsTPAWrap(const TPA: TPointArray; MinPixels: Integer; var Res: T2DPointArray); begin end;
procedure RemoveDistTPointArrayWrap(x, y, dist: Integer; const ThePoints: TPointArray; RemoveHigher: Boolean; var Res: TPointArray); begin end;
procedure CombineTPAWrap(const Ar1, Ar2: TPointArray; var Res: TPointArray); begin end;
procedure ReArrangeandShortenArrayExWrap(const a: TPointArray; w, h: Integer; var Res: TPointArray); begin end;
procedure ReArrangeandShortenArrayWrap(const a: TPointArray; Dist: Integer; var Res: TPointArray); begin end;
procedure TPAtoATPAExWrap(const TPA: TPointArray; w, h: Integer; var Res: T2DPointArray); begin end;
procedure TPAtoATPAWrap(const TPA: TPointArray; Dist: Integer; var Res: T2DPointArray); begin end;
procedure CombineIntArrayWrap(const Ar1, Ar2: TIntegerArray; var Res: TIntegerArray); begin end;
procedure MergeATPAWrap(const ATPA: T2DPointArray; var Res: TPointArray); begin end;
procedure TPAFromLineWrap(const x1, y1, x2, y2: Integer; var Res: TPointArray); begin end;
procedure EdgeFromBoxWrap(const Box: TBox; var Res: TPointArray); begin end;
procedure TPAFromBoxWrap(const Box: TBox; var Res: TPointArray); begin end;
procedure TPAFromEllipseWrap(const CX, CY, XRadius, YRadius : Integer; var Res: TPointArray); begin end;
procedure TPAFromCircleWrap(const CX, CY, Radius : Integer; var Res: TPointArray); begin end;
procedure RotatePointsWrap(Const P: TPointArray; A, cx, cy: Extended; var Res: TPointArray); begin end;
procedure FindTPAEdgesWrap(const p: TPointArray; var Res: TPointArray); begin end;
procedure ClearTPAFromTPAWrap(const arP, ClearPoints: TPointArray; var Res: TPointArray); begin end;
procedure ReturnPointsNotInTPAWrap(Const TotalTPA: TPointArray; const Box: TBox; var Res: TPointArray); begin end;
function SameTPA(const aTPA, bTPA: TPointArray): Boolean; begin end;
function TPAInATPA(const TPA: TPointArray; const InATPA: T2DPointArray; var Index: LongInt): Boolean; begin end;
procedure OffsetTPA(var TPA: TPointArray; const Offset: TPoint); begin end;
procedure OffsetATPA(var ATPA: T2DPointArray; const Offset: TPoint); begin end;
function CopyTPA(const TPA: TPointArray): TPointArray; begin end;
function CopyATPA(const ATPA: T2DPointArray): T2DPointArray; begin end;
function TPAPosNext(const Find: TPoint; const V: TPointArray; const PrevPos: Integer;const IsSortedAscending: Boolean): Integer; begin end;
function GlueTPAs(const V1, V2: TPointArray; const IsSortedAscending,byDifference: Boolean):TPointArray; begin end;
function PartitionTPA(const TPA: TPointArray; BoxWidth, BoxHeight: Integer): T2DPointArray; begin end;